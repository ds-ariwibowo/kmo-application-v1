using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Globalization;

using KMO.Class;

namespace KMO.Setup
{
    public partial class CFS2 : System.Web.UI.Page
    {
        DataTable dt;
        DataSet ds;
        Boolean bRes;
        Boolean bEdit;
        string dSuite;
        string iIDSuite;
        string iIDCFSContractEdit;

        enum eMessage : byte { eSuccess = 1, eWarning = 2, eError = 3 };

        private void hideMessageBox()
        {
            mySuccess.Visible = false;
            lblMySuccess.Text = "";
            myWarning.Visible = false;
            lblMyWarning.Text = "";
            myError.Visible = false;
            lblMyError.Text = "";
        }

        private void showMessage(eMessage iPilih, string iTitle, string iMessage)
        {
            hideMessageBox();

            switch (iPilih)
            {
                case eMessage.eSuccess:
                    mySuccess.Visible = true;
                    lblTitleMySuccess.Text = iTitle;
                    lblMySuccess.Text = iMessage;
                    break;
                case eMessage.eWarning:
                    myWarning.Visible = true;
                    lblTitleMyWarning.Text = iTitle;
                    lblMyWarning.Text = iMessage;
                    break;
                case eMessage.eError:
                    myError.Visible = true;
                    lblTitleMyError.Text = iTitle;
                    lblMyError.Text = iMessage;
                    break;
            }
        }

        private void clearText()
        {
            //Session["DetailCFS"] = null;
            //Session["EditCFS"] = null;

            dSuite = "";
            hideMessageBox();

            lblCID.Text = "[Auto Generated by System]";
            lblProposedSuite.Text = "[Auto Generated by System]";
            txtNPWP.Text = "";
            txtLOODate.Text = "";

            txtCompanyName.Text = "";
            txtAddress.Text = "";
            txtCity.Text = "";
            txtZIP.Text = "";
            txtTelp.Text = "";

            txtPIC1Name.Text = "";
            txtPIC1Position.Text = "";
            txtPIC1MobilePh.Text = "";
            txtPIC1Email.Text = "";
            txtPIC2Name.Text = "";
            txtPIC2Position.Text = "";
            txtPIC2MobilePh.Text = "";
            txtPIC2Email.Text = "";
            txtPIC3Name.Text = "";
            txtPIC3Position.Text = "";
            txtPIC3MobilePh.Text = "";
            txtPIC3Email.Text = "";

            cmbLoB.Text = "";
            txtLoB.Text = "";
            cmbNoE.Text = "";

            txtFittingOutDate.Text = ""; 

            txtContractNo.Text = "";
            txtContractExpiredDate.Text = "";
            txtContractPeriod.Text = "";
            txtMemorandumNo.Text = "";
            txtMemorandumExpiredDate.Text = "";
            txtContractNote.Text = "";

            txtServiceCommencementDate.Text = "";
            txtRentCommencementDate.Text = "";
            txtRentPeriod.Text = "";
            ddlRentPeriod.Text = "";
            txtRentCharge.Text = "";
            txtServiceCharge.Text = "";
            txtOtherCharge.Text = "";

            txtSuite101.Text = "";
            txtSuite105.Text = "";
            txtSuite110.Text = "";
            txtSuite201.Text = "";
            txtSuite205.Text = "";
            txtSuite210.Text = "";
            txtSuite301.Text = "";
            txtSuite305.Text = "";
            txtSuite310.Text = "";
            txtSuite501.Text = "";
            txtSuite505.Text = "";
            txtSuite510.Text = "";
            txtSuite601.Text = "";
            txtSuite605.Text = "";
            txtSuite610.Text = "";
            txtSuite701.Text = "";
            txtSuite705.Text = "";
            txtSuite710.Text = "";
            txtSuite801.Text = "";
            txtSuite805.Text = "";
            txtSuite810.Text = "";
            txtSuite901.Text = "";
            txtSuite905.Text = "";
            txtSuite910.Text = "";

            txtSuite101KVA.Text = "";
            txtSuite105KVA.Text = "";
            txtSuite110KVA.Text = "";
            txtSuite201KVA.Text = "";
            txtSuite205KVA.Text = "";
            txtSuite210KVA.Text = "";
            txtSuite301KVA.Text = "";
            txtSuite305KVA.Text = "";
            txtSuite310KVA.Text = "";
            txtSuite501KVA.Text = "";
            txtSuite505KVA.Text = "";
            txtSuite510KVA.Text = "";
            txtSuite601KVA.Text = "";
            txtSuite605KVA.Text = "";
            txtSuite610KVA.Text = "";
            txtSuite701KVA.Text = "";
            txtSuite705KVA.Text = "";
            txtSuite710KVA.Text = "";
            txtSuite801KVA.Text = "";
            txtSuite805KVA.Text = "";
            txtSuite810KVA.Text = "";
            txtSuite901KVA.Text = "";
            txtSuite905KVA.Text = "";
            txtSuite910KVA.Text = "";

            rbRCars0.Checked = true;
            rbUCars0.Checked = true;
            rbRMotos0.Checked = true;
            rbTL0.Checked = true;

            txtDepositPeriod.Text = "";
            ddlDepositPeriod.Text = "";
            txtDepositRentCharge.Text = "";
            txtDepositServiceCharge.Text = "";
            txtDepositOtherCharge.Text = "";

            txtSuite101RS.Text = "";
            txtSuite105RS.Text = "";
            txtSuite110RS.Text = "";
            txtSuite201RS.Text = "";
            txtSuite205RS.Text = "";
            txtSuite210RS.Text = "";
            txtSuite301RS.Text = "";
            txtSuite305RS.Text = "";
            txtSuite310RS.Text = "";
            txtSuite501RS.Text = "";
            txtSuite505RS.Text = "";
            txtSuite510RS.Text = "";
            txtSuite601RS.Text = "";
            txtSuite605RS.Text = "";
            txtSuite610RS.Text = "";
            txtSuite701RS.Text = "";
            txtSuite705RS.Text = "";
            txtSuite710RS.Text = "";
            txtSuite801RS.Text = "";
            txtSuite805RS.Text = "";
            txtSuite810RS.Text = "";
            txtSuite901RS.Text = "";
            txtSuite905RS.Text = "";
            txtSuite910RS.Text = "";

            txtRpcPeriod.Text = "";
            ddlRpc.Text = "";
            txtRpcCharge.Text = "";
            txtUrcPeriod.Text = "";
            ddlUrc.Text = "";
            txtUrcCharge.Text = "";
            txtRpmPeriod.Text = "";
            ddlRpm.Text = "";
            txtRpmCharge.Text = "";

            txtParkingOtherCharge.Text = "";

            txtSpecialConditions.Text = "";

            txtLOODate.Enabled = true;
            cmbLoB.Enabled = true;
            txtLoB.Enabled = true;

        }
        private Boolean checkData()
        {
            Boolean iRes=true;

            try
            {
                //if (txtLOODate.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "LOO date is empty."); }
                if (txtCompanyName.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Company name is empty."); }
                if (txtCity.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "City name is empty."); }
                if (txtPIC1Name.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "PIC name is empty."); }
                if (cmbLoB.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Line od business is empty."); }
                if (txtRentCommencementDate.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Rent commentcement date is empty."); }
                if (txtServiceCommencementDate.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Service commentcement date is empty."); }

                try
                {
                    DateTime iPD = DateTime.ParseExact(txtRentCommencementDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    DateTime iDD = DateTime.ParseExact(txtServiceCommencementDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);                    
                }
                catch (Exception me)
                {
                    showMessage(eMessage.eWarning, "Format date", "Please input your rent/service commencement format date to dd-MM-yyyy.");
                    iRes = false;
                }

                if (!bEdit)
                {
                    if (txtContractNo.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Contract number is empty."); }
                    if (txtContractExpiredDate.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Contract number is empty."); }
                    if (txtContractPeriod.Text.Trim() == "") { iRes = false; showMessage(eMessage.eWarning, "Data empty", "Contract period is empty."); }

                    try
                    {
                        DateTime iPD = DateTime.ParseExact(txtContractExpiredDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                        DateTime iDD = DateTime.ParseExact(txtMemorandumExpiredDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                    }
                    catch (Exception me)
                    {
                        showMessage(eMessage.eWarning, "Format date", "Please input your contract/memorandum format date to dd-MM-yyyy.");
                        iRes = false;
                    }                    
                }
            }
            catch (Exception me)
            {
                iRes = false;
                showMessage(eMessage.eError, "checkData", me.Message);
            }
            return iRes;
        }

        private string getCFSSeqNumber(string iYear)
        {
            string iResult = "";

            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spCheckCFSMaxData", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter parm = new SqlParameter("@Result", SqlDbType.Int);
                parm.Direction = ParameterDirection.ReturnValue;

                cmd.Parameters.Add(parm);
                cmd.Parameters.Add(new SqlParameter("@CodeYear", iYear ));
                
                SqlParameter returnParameter = cmd.Parameters.Add("@Result", SqlDbType.Int);
                returnParameter.Direction = ParameterDirection.ReturnValue;

                cmd.ExecuteNonQuery();
                conn.Close();

                int iJml = Convert.ToInt32(parm.Value);
                if (iJml > 0)
                {
                    string sJml = iJml.ToString();

                    switch (sJml.Length){
                        case 1:
                            iResult= "000" + sJml;
                            break;
                        case 2:
                            iResult = "00" + sJml;
                            break;
                        case 3:
                            iResult = "0" + sJml;
                            break;
                        case 4:
                            iResult = sJml;
                            break;
                    }

                    bRes = true;
                }
                else
                {
                    iResult = "0001";
                }

            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "getCFSSeqNumber", me.Message);                
            }

            return iResult;
        }
        private string getCFSID(string iCodeLoB, string iCodePropertyName, string iCodeSeqNo,
                        string iCodeYear, string iCodeMonth)
        {
            string iResult = "";

            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spCheckCFSID", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlParameter parm = new SqlParameter("@Result", SqlDbType.Int);
                parm.Direction = ParameterDirection.ReturnValue;

                cmd.Parameters.Add(parm);
                cmd.Parameters.Add(new SqlParameter("@CodeLoB", iCodeLoB));
                cmd.Parameters.Add(new SqlParameter("@CodePropertyName", iCodePropertyName));
                cmd.Parameters.Add(new SqlParameter("@CodeSeqNo", iCodeSeqNo));
                cmd.Parameters.Add(new SqlParameter("@CodeYear", iCodeYear));
                cmd.Parameters.Add(new SqlParameter("@CodeMonth", iCodeMonth));

                SqlParameter returnParameter = cmd.Parameters.Add("@Result", SqlDbType.Int);
                returnParameter.Direction = ParameterDirection.ReturnValue;

                cmd.ExecuteNonQuery();
                conn.Close();

                int iJml = Convert.ToInt32(parm.Value);
                if (iJml > 0)
                {
                    bRes = true;
                    iResult = iJml.ToString();
                }
                

            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "getCFSID", me.Message);
                iResult = "";
            }
            return iResult;
        }

        private void getReservedParking(string iRCars, string iUCars, string iRMotos, string iTL)
        {
            if (iRCars=="0") { rbRCars0.Checked=true; }
            if (iRCars=="1") {rbRCars1.Checked=true;}
            if (iRCars=="2") {rbRCars2.Checked=true;}
            if (iRCars=="3") {rbRCars3.Checked=true;}
            if (iRCars=="4") {rbRCars4.Checked=true;}
            if (iRCars=="5") {rbRCars5.Checked=true;}
            if (iRCars=="6") {rbRCars6.Checked=true;}
            if (iRCars=="7") {rbRCars7.Checked=true;}
            if (iRCars=="8") {rbRCars8.Checked=true;}
            if (iRCars=="9") {rbRCars9.Checked=true;}
            if (iRCars=="10") {rbRCars10.Checked=true;}
            if (iRCars=="11") {rbRCars11.Checked=true;}
            if (iRCars=="12") {rbRCars12.Checked=true;}
            if (iRCars=="13") {rbRCars13.Checked=true;}
            if (iRCars=="14") {rbRCars14.Checked=true;}
            if (iRCars=="15") {rbRCars15.Checked=true;}
            if (iRCars=="16") {rbRCars16.Checked=true;}
            if (iRCars=="17") {rbRCars17.Checked=true;}
            if (iRCars=="18") {rbRCars18.Checked=true;}
            if (iRCars=="19") {rbRCars19.Checked=true;}
            if (iRCars=="20") {rbRCars20.Checked=true;}
            if (iRCars=="21") {rbRCars21.Checked=true;}
            if (iRCars=="22") {rbRCars22.Checked=true;}
            if (iRCars=="23") {rbRCars23.Checked=true;}
            if (iRCars=="24") {rbRCars24.Checked=true;}
            if (iRCars=="25") {rbRCars25.Checked=true;}
            if (iRCars=="26") {rbRCars26.Checked=true;}
            if (iRCars=="27") {rbRCars27.Checked=true;}
            if (iRCars=="28") {rbRCars28.Checked=true;}
            if (iRCars=="29") {rbRCars29.Checked=true;}
            if (iRCars=="30") {rbRCars30.Checked=true;}

            if (iUCars == "0") { rbUCars0.Checked = true; }
            if (iUCars=="1") {rbUCars1.Checked=true;}
            if (iUCars=="2") {rbUCars2.Checked=true;}
            if (iUCars=="3") {rbUCars3.Checked=true;}
            if (iUCars=="4") {rbUCars4.Checked=true;}
            if (iUCars=="5") {rbUCars5.Checked=true;}
            if (iUCars=="6") {rbUCars6.Checked=true;}
            if (iUCars=="7") {rbUCars7.Checked=true;}
            if (iUCars=="8") {rbUCars8.Checked=true;}
            if (iUCars=="9") {rbUCars9.Checked=true;}
            if (iUCars=="10") {rbUCars10.Checked=true;}
            if (iUCars=="11") {rbUCars11.Checked=true;}
            if (iUCars=="12") {rbUCars12.Checked=true;}
            if (iUCars=="13") {rbUCars13.Checked=true;}
            if (iUCars=="14") {rbUCars14.Checked=true;}
            if (iUCars=="15") {rbUCars15.Checked=true;}
            if (iUCars=="16") {rbUCars16.Checked=true;}
            if (iUCars=="17") {rbUCars17.Checked=true;}
            if (iUCars=="18") {rbUCars18.Checked=true;}
            if (iUCars=="19") {rbUCars19.Checked=true;}
            if (iUCars=="20") {rbUCars20.Checked=true;}
            if (iUCars=="21") {rbUCars21.Checked=true;}
            if (iUCars=="22") {rbUCars22.Checked=true;}
            if (iUCars=="23") {rbUCars23.Checked=true;}
            if (iUCars=="24") {rbUCars24.Checked=true;}
            if (iUCars=="25") {rbUCars25.Checked=true;}
            if (iUCars=="26") {rbUCars26.Checked=true;}
            if (iUCars=="27") {rbUCars27.Checked=true;}
            if (iUCars=="28") {rbUCars28.Checked=true;}
            if (iUCars=="29") {rbUCars29.Checked=true;}
            if (iUCars=="30") {rbUCars30.Checked=true;}

            if (iRMotos == "0") { rbRMotos0.Checked = true; }
            if (iRMotos=="1") {rbRMotos1.Checked=true;}
            if (iRMotos=="2") {rbRMotos2.Checked=true;}
            if (iRMotos=="3") {rbRMotos3.Checked=true;}
            if (iRMotos=="4") {rbRMotos4.Checked=true;}
            if (iRMotos=="5") {rbRMotos5.Checked=true;}
            if (iRMotos=="6") {rbRMotos6.Checked=true;}
            if (iRMotos=="7") {rbRMotos7.Checked=true;}
            if (iRMotos=="8") {rbRMotos8.Checked=true;}
            if (iRMotos=="9") {rbRMotos9.Checked=true;}
            if (iRMotos=="10") {rbRMotos10.Checked=true;}
            if (iRMotos=="11") {rbRMotos11.Checked=true;}
            if (iRMotos=="12") {rbRMotos12.Checked=true;}
            if (iRMotos=="13") {rbRMotos13.Checked=true;}
            if (iRMotos=="14") {rbRMotos14.Checked=true;}
            if (iRMotos=="15") {rbRMotos15.Checked=true;}
            if (iRMotos=="16") {rbRMotos16.Checked=true;}
            if (iRMotos=="17") {rbRMotos17.Checked=true;}
            if (iRMotos=="18") {rbRMotos18.Checked=true;}
            if (iRMotos=="19") {rbRMotos19.Checked=true;}
            if (iRMotos=="20") {rbRMotos20.Checked=true;}
            if (iRMotos=="21") {rbRMotos21.Checked=true;}
            if (iRMotos=="22") {rbRMotos22.Checked=true;}
            if (iRMotos=="23") {rbRMotos23.Checked=true;}
            if (iRMotos=="24") {rbRMotos24.Checked=true;}
            if (iRMotos=="25") {rbRMotos25.Checked=true;}
            if (iRMotos=="26") {rbRMotos26.Checked=true;}
            if (iRMotos=="27") {rbRMotos27.Checked=true;}
            if (iRMotos=="28") {rbRMotos28.Checked=true;}
            if (iRMotos=="29") {rbRMotos29.Checked=true;}
            if (iRMotos=="30") {rbRMotos30.Checked=true;}

            if (iTL == "0") { rbTL0.Checked = true; }
            if (iTL=="1") {rbTL1.Checked=true;}
            if (iTL=="2") {rbTL2.Checked=true;}
            if (iTL=="3") {rbTL3.Checked=true;}
            if (iTL=="4") {rbTL4.Checked=true;}
            if (iTL=="5") {rbTL5.Checked=true;}
            if (iTL=="6") {rbTL6.Checked=true;}
            if (iTL=="7") {rbTL7.Checked=true;}
            if (iTL=="8") {rbTL8.Checked=true;}
            if (iTL=="9") {rbTL9.Checked=true;}
            if (iTL=="10") {rbTL10.Checked=true;}
            if (iTL=="11") {rbTL11.Checked=true;}
            if (iTL=="12") {rbTL12.Checked=true;}
            if (iTL=="13") {rbTL13.Checked=true;}
            if (iTL=="14") {rbTL14.Checked=true;}
            if (iTL=="15") {rbTL15.Checked=true;}
            if (iTL=="16") {rbTL16.Checked=true;}
            if (iTL=="17") {rbTL17.Checked=true;}
            if (iTL=="18") {rbTL18.Checked=true;}
            if (iTL=="19") {rbTL19.Checked=true;}
            if (iTL=="20") {rbTL20.Checked=true;}
            if (iTL=="21") {rbTL21.Checked=true;}
            if (iTL=="22") {rbTL22.Checked=true;}
            if (iTL=="23") {rbTL23.Checked=true;}
            if (iTL=="24") {rbTL24.Checked=true;}
            if (iTL=="25") {rbTL25.Checked=true;}
            if (iTL=="26") {rbTL26.Checked=true;}
            if (iTL=="27") {rbTL27.Checked=true;}
            if (iTL=="28") {rbTL28.Checked=true;}
            if (iTL=="29") {rbTL29.Checked=true;}
            if (iTL=="30") {rbTL30.Checked=true;}
        }

        private void getSuite()
        {
            string iFloor;
            string iSuiteNo;
            string iArea;

            try
            {
                ds = Db.get_list("execute spGetCFSSuite_All ");

                dt = ds.Tables[0];

                foreach (DataRow dr in dt.Rows)
                {
                    iFloor = dr["Floor"].ToString();
                    iSuiteNo = dr["SuiteNo"].ToString(); ;
                    iArea = dr["Area"].ToString(); ;

                    switch (iFloor)
                    {
                        case "1":
                            if (iSuiteNo == "101")
                            {
                                chkSuite101.Checked = false;
                                chkSuite101.Enabled = false;
                                txtSuite101.Enabled = false;
                                txtSuite101KVA.Enabled = false;

                                chkSuite101RS.Checked = false;
                                chkSuite101RS.Enabled = false;
                                txtSuite101RS.Enabled = false;
                            }
                            if (iSuiteNo == "105")
                            {
                                chkSuite105.Checked = false;
                                chkSuite105.Enabled = false;
                                txtSuite105.Enabled = false;
                                txtSuite105KVA.Enabled = false;

                                chkSuite105RS.Checked = false;
                                chkSuite105RS.Enabled = false;
                                txtSuite105RS.Enabled = false;
                            }
                            if (iSuiteNo == "110")
                            {
                                chkSuite110.Checked = false;
                                chkSuite110.Enabled = false;
                                txtSuite110.Enabled = false;
                                txtSuite110KVA.Enabled = false;

                                chkSuite110RS.Checked = false;
                                chkSuite110RS.Enabled = false;
                                txtSuite110RS.Enabled = false;
                            }

                            break;
                        case "2":
                            if (iSuiteNo == "201")
                            {
                                chkSuite201.Checked = false;
                                chkSuite201.Enabled = false;
                                txtSuite201.Enabled = false;
                                txtSuite201KVA.Enabled = false;

                                chkSuite201RS.Checked = false;
                                chkSuite201RS.Enabled = false;
                                txtSuite201RS.Enabled = false;
                            }
                            if (iSuiteNo == "205")
                            {
                                chkSuite205.Checked = false;
                                chkSuite205.Enabled = false;
                                txtSuite205.Enabled = false;
                                txtSuite205KVA.Enabled = false;

                                chkSuite205RS.Checked = false;
                                chkSuite205RS.Enabled = false;
                                txtSuite205RS.Enabled = false;
                            }
                            if (iSuiteNo == "210")
                            {
                                chkSuite210.Checked = false;
                                chkSuite210.Enabled = false;
                                txtSuite210.Enabled = false;
                                txtSuite210KVA.Enabled = false;

                                chkSuite210RS.Checked = false;
                                chkSuite210RS.Enabled = false;
                                txtSuite210RS.Enabled = false;
                            }

                            break;
                        case "3":
                            if (iSuiteNo == "301")
                            {
                                chkSuite301.Checked = false;
                                chkSuite301.Enabled = false;
                                txtSuite301.Enabled = false;
                                txtSuite301KVA.Enabled = false;

                                chkSuite301RS.Checked = false;
                                chkSuite301RS.Enabled = false;
                                txtSuite301RS.Enabled = false;
                            }
                            if (iSuiteNo == "305")
                            {
                                chkSuite305.Checked = false;
                                chkSuite305.Enabled = false;
                                txtSuite305.Enabled = false;
                                txtSuite305KVA.Enabled = false;

                                chkSuite305RS.Checked = false;
                                chkSuite305RS.Enabled = false;
                                txtSuite305RS.Enabled = false;
                            }
                            if (iSuiteNo == "310")
                            {
                                chkSuite310.Checked = false;
                                chkSuite310.Enabled = false;
                                txtSuite310.Enabled = false;
                                txtSuite310KVA.Enabled = false;

                                chkSuite310RS.Checked = false;
                                chkSuite310RS.Enabled = false;
                                txtSuite310RS.Enabled = false;
                            }

                            break;
                        case "5":
                            if (iSuiteNo == "501")
                            {
                                chkSuite501.Checked = false;
                                chkSuite501.Enabled = false;
                                txtSuite501.Enabled = false;
                                txtSuite501KVA.Enabled = false;

                                chkSuite501RS.Checked = false;
                                chkSuite501RS.Enabled = false;
                                txtSuite501RS.Enabled = false;
                            }
                            if (iSuiteNo == "505")
                            {
                                chkSuite505.Checked = false;
                                chkSuite505.Enabled = false;
                                txtSuite505.Enabled = false;
                                txtSuite505KVA.Enabled = false;

                                chkSuite505RS.Checked = false;
                                chkSuite505RS.Enabled = false;
                                txtSuite505RS.Enabled = false;
                            }
                            if (iSuiteNo == "510")
                            {
                                chkSuite510.Checked = false;
                                chkSuite510.Enabled = false;
                                txtSuite510.Enabled = false;
                                txtSuite510KVA.Enabled = false;

                                chkSuite510RS.Checked = false;
                                chkSuite510RS.Enabled = false;
                                txtSuite510RS.Enabled = false;
                            }
                            break;
                        case "6":
                            if (iSuiteNo == "601")
                            {
                                chkSuite601.Checked = false;
                                chkSuite601.Enabled = false;
                                txtSuite601.Enabled = false;
                                txtSuite601KVA.Enabled = false;

                                chkSuite601RS.Checked = false;
                                chkSuite601RS.Enabled = false;
                                txtSuite601RS.Enabled = false;
                            }
                            if (iSuiteNo == "605")
                            {
                                chkSuite605.Checked = false;
                                chkSuite605.Enabled = false;
                                txtSuite605.Enabled = false;
                                txtSuite605KVA.Enabled = false;

                                chkSuite605RS.Checked = false;
                                chkSuite605RS.Enabled = false;
                                txtSuite605RS.Enabled = false;
                            }
                            if (iSuiteNo == "610")
                            {
                                chkSuite610.Checked = false;
                                chkSuite610.Enabled = false;
                                txtSuite610.Enabled = false;
                                txtSuite610KVA.Enabled = false;

                                chkSuite610RS.Checked = false;
                                chkSuite610RS.Enabled = false;
                                txtSuite610RS.Enabled = false;
                            }

                            break;
                        case "7":
                            if (iSuiteNo == "701")
                            {
                                chkSuite701.Checked = false;
                                chkSuite701.Enabled = false;
                                txtSuite701.Enabled = false;
                                txtSuite701KVA.Enabled = false;

                                chkSuite701RS.Checked = false;
                                chkSuite701RS.Enabled = false;
                                txtSuite701RS.Enabled = false;
                            }
                            if (iSuiteNo == "705")
                            {
                                chkSuite705.Checked = false;
                                chkSuite705.Enabled = false;
                                txtSuite705.Enabled = false;
                                txtSuite705KVA.Enabled = false;

                                chkSuite705RS.Checked = false;
                                chkSuite705RS.Enabled = false;
                                txtSuite705RS.Enabled = false;
                            }
                            if (iSuiteNo == "710")
                            {
                                chkSuite710.Checked = false;
                                chkSuite710.Enabled = false;
                                txtSuite710.Enabled = false;
                                txtSuite710KVA.Enabled = false;

                                chkSuite710RS.Checked = false;
                                chkSuite710RS.Enabled = false;
                                txtSuite710RS.Enabled = false;
                            }

                            break;
                        case "8":
                            if (iSuiteNo == "801")
                            {
                                chkSuite801.Checked = false;
                                chkSuite801.Enabled = false;
                                txtSuite801.Enabled = false;
                                txtSuite801KVA.Enabled = false;

                                chkSuite801RS.Checked = false;
                                chkSuite801RS.Enabled = false;
                                txtSuite801RS.Enabled = false;
                            }
                            if (iSuiteNo == "805")
                            {
                                chkSuite805.Checked = false;
                                chkSuite805.Enabled = false;
                                txtSuite805.Enabled = false;
                                txtSuite805KVA.Enabled = false;

                                chkSuite805RS.Checked = false;
                                chkSuite805RS.Enabled = false;
                                txtSuite805RS.Enabled = false;
                            }
                            if (iSuiteNo == "810")
                            {
                                chkSuite810.Checked = false;
                                chkSuite810.Enabled = false;
                                txtSuite810.Enabled = false;
                                txtSuite810KVA.Enabled = false;

                                chkSuite810RS.Checked = false;
                                chkSuite810RS.Enabled = false;
                                txtSuite810RS.Enabled = false;
                            }

                            break;
                        case "9":
                            if (iSuiteNo == "901")
                            {
                                chkSuite901.Checked = false;
                                chkSuite901.Enabled = false;
                                txtSuite901.Enabled = false;
                                txtSuite901KVA.Enabled = false;

                                chkSuite901RS.Checked = false;
                                chkSuite901RS.Enabled = false;
                                txtSuite901RS.Enabled = false;
                            }
                            if (iSuiteNo == "905")
                            {
                                chkSuite905.Checked = false;
                                chkSuite905.Enabled = false;
                                txtSuite905.Enabled = false;
                                txtSuite905KVA.Enabled = false;

                                chkSuite905RS.Checked = false;
                                chkSuite905RS.Enabled = false;
                                txtSuite905RS.Enabled = false;
                            }
                            if (iSuiteNo == "910")
                            {
                                chkSuite910.Checked = false;
                                chkSuite910.Enabled = false;
                                txtSuite910.Enabled = false;
                                txtSuite910KVA.Enabled = false;

                                chkSuite910RS.Checked = false;
                                chkSuite910RS.Enabled = false;
                                txtSuite910RS.Enabled = false;
                            }

                            break;
                    }
                }
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "getSuite", me.Message);
            }

        }
        private void getSuite(string iCFSID)
        {
            string iFloor;
            string iSuiteNo;
            string iArea;
            string iKVA;

            try
            {
                ds = Db.get_list("execute spGetCFSSuite_Query " + iCFSID);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    dt = ds.Tables[0];

                    txtRentPeriod.Text = ds.Tables[0].Rows[0]["RentalPeriod"].ToString();
                    ddlRentPeriod.Text = ds.Tables[0].Rows[0]["RentalPeriodMY"].ToString();
                    txtRentCharge.Text = ds.Tables[0].Rows[0]["RentalCharge"].ToString();
                    txtServiceCharge.Text = ds.Tables[0].Rows[0]["ServiceCharge"].ToString();
                    txtOtherCharge.Text = ds.Tables[0].Rows[0]["OtherCharge"].ToString();

                    txtDepositPeriod.Text = ds.Tables[0].Rows[0]["DepositRentalPeriod"].ToString();
                    ddlDepositPeriod.Text = ds.Tables[0].Rows[0]["DepositRentalPeriodMY"].ToString();
                    txtDepositRentCharge.Text = ds.Tables[0].Rows[0]["DepositRentalCharge"].ToString();
                    txtDepositServiceCharge.Text = ds.Tables[0].Rows[0]["DepositServiceCharge"].ToString();
                    txtDepositOtherCharge.Text = ds.Tables[0].Rows[0]["DepositOtherCharge"].ToString();

                    foreach (DataRow dr in dt.Rows)
                    {                        
                        if (dr["SuiteNo"].ToString() == Session["SuiteNo"].ToString()) {
                            //Session["EditIDCFSSuite"] = ds.Tables[0].Rows[0]["IDSuite"].ToString();
                            Session["EditIDCFSSuite"] = dr["IDSuite"].ToString();
                        }

                        iFloor = dr["Floor"].ToString();
                        iSuiteNo = dr["SuiteNo"].ToString();
                        iArea = dr["Area"].ToString();
                        iKVA = dr["KVA"].ToString();

                        switch (iFloor)
                        {
                            case "1":
                                if (iSuiteNo == "101")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite101.Checked = true;
                                    txtSuite101.Text = iArea;
                                    txtSuite101KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null )
                                    {
                                        chkSuite101.Enabled = false;
                                        txtSuite101.Enabled = false;
                                        txtSuite101KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite101.Enabled = true;
                                            txtSuite101.Enabled = true;
                                            txtSuite101KVA.Enabled = true;
                                        }                                        
                                    }

                                    chkSuite101RS.Checked = true;
                                    txtSuite101RS.Text = iArea;

                                    chkSuite101RS.Enabled = false;
                                    txtSuite101RS.Enabled = false;
                                }
                                if (iSuiteNo == "105")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite105.Checked = true;
                                    txtSuite105.Text = iArea;
                                    txtSuite105KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite105.Enabled = false;
                                        txtSuite105.Enabled = false;
                                        txtSuite105KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite105.Enabled = true;
                                            txtSuite105.Enabled = true;
                                            txtSuite105KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite105RS.Checked = true;
                                    txtSuite105RS.Text = iArea;

                                    chkSuite105RS.Enabled = false;
                                    txtSuite105RS.Enabled = false;
                                }
                                if (iSuiteNo == "110")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite110.Checked = true;
                                    txtSuite110.Text = iArea;
                                    txtSuite110KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite110.Enabled = false;
                                        txtSuite110.Enabled = false;
                                        txtSuite110KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite110.Enabled = true;
                                            txtSuite110.Enabled = true;
                                            txtSuite110KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite110RS.Checked = true;
                                    txtSuite110RS.Text = iArea;

                                    chkSuite110RS.Enabled = false;
                                    txtSuite110RS.Enabled = false;
                                }

                                break;
                            case "2":
                                if (iSuiteNo == "201")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite201.Checked = true;
                                    txtSuite201.Text = iArea;
                                    txtSuite201KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite201.Enabled = false;
                                        txtSuite201.Enabled = false;
                                        txtSuite201KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite201.Enabled = true;
                                            txtSuite201.Enabled = true;
                                            txtSuite201KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite201RS.Checked = true;
                                    txtSuite201RS.Text = iArea;

                                    chkSuite201RS.Enabled = false;
                                    txtSuite201RS.Enabled = false;
                                }
                                if (iSuiteNo == "205")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite205.Checked = true;
                                    txtSuite205.Text = iArea;
                                    txtSuite205KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite205.Enabled = false;
                                        txtSuite205.Enabled = false;
                                        txtSuite205KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite205.Enabled = true;
                                            txtSuite205.Enabled = true;
                                            txtSuite205KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite205RS.Checked = true;
                                    txtSuite205RS.Text = iArea;

                                    chkSuite205RS.Enabled = false;
                                    txtSuite205RS.Enabled = false;
                                }
                                if (iSuiteNo == "210")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite210.Checked = true;
                                    txtSuite210.Text = iArea;
                                    txtSuite210KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite210.Enabled = false;
                                        txtSuite210.Enabled = false;
                                        txtSuite210KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite210.Enabled = true;
                                            txtSuite210.Enabled = true;
                                            txtSuite210KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite210RS.Checked = true;
                                    txtSuite210RS.Text = iArea;

                                    chkSuite210RS.Enabled = false;
                                    txtSuite210RS.Enabled = false;
                                }

                                break;
                            case "3":
                                if (iSuiteNo == "301")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite301.Checked = true;
                                    txtSuite301.Text = iArea;
                                    txtSuite301KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite301.Enabled = false;
                                        txtSuite301.Enabled = false;
                                        txtSuite301KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite301.Enabled = true;
                                            txtSuite301.Enabled = true;
                                            txtSuite301KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite301RS.Checked = true;
                                    txtSuite301RS.Text = iArea;

                                    chkSuite301RS.Enabled = false;
                                    txtSuite301RS.Enabled = false;
                                }
                                if (iSuiteNo == "305")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite305.Checked = true;
                                    txtSuite305.Text = iArea;
                                    txtSuite305KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite305.Enabled = false;
                                        txtSuite305.Enabled = false;
                                        txtSuite305KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite305.Enabled = true;
                                            txtSuite305.Enabled = true;
                                            txtSuite305KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite305RS.Checked = true;
                                    txtSuite305RS.Text = iArea;

                                    chkSuite305RS.Enabled = false;
                                    txtSuite305RS.Enabled = false;
                                }
                                if (iSuiteNo == "310")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite310.Checked = true;
                                    txtSuite310.Text = iArea;
                                    txtSuite310KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite310.Enabled = false;
                                        txtSuite310.Enabled = false;
                                        txtSuite310KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite310.Enabled = true;
                                            txtSuite310.Enabled = true;
                                            txtSuite310KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite310RS.Checked = true;
                                    txtSuite310RS.Text = iArea;

                                    chkSuite310RS.Enabled = false;
                                    txtSuite310RS.Enabled = false;
                                }

                                break;
                            case "5":
                                if (iSuiteNo == "501")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite501.Checked = true;
                                    txtSuite501.Text = iArea;
                                    txtSuite501KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite501.Enabled = false;
                                        txtSuite501.Enabled = false;
                                        txtSuite501KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite501.Enabled = true;
                                            txtSuite501.Enabled = true;
                                            txtSuite501KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite501RS.Checked = true;
                                    txtSuite501RS.Text = iArea;

                                    chkSuite501RS.Enabled = false;
                                    txtSuite501RS.Enabled = false;
                                }
                                if (iSuiteNo == "505")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite505.Checked = true;
                                    txtSuite505.Text = iArea;
                                    txtSuite505KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite505.Enabled = false;
                                        txtSuite505.Enabled = false;
                                        txtSuite505KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite505.Enabled = true;
                                            txtSuite505.Enabled = true;
                                            txtSuite505KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite505RS.Checked = true;
                                    txtSuite505RS.Text = iArea;

                                    chkSuite505RS.Enabled = false;
                                    txtSuite505RS.Enabled = false;
                                }
                                if (iSuiteNo == "510")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite510.Checked = true;
                                    txtSuite510.Text = iArea;
                                    txtSuite510KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite510.Enabled = false;
                                        txtSuite510.Enabled = false;
                                        txtSuite510KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite510.Enabled = true;
                                            txtSuite510.Enabled = true;
                                            txtSuite510KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite510RS.Checked = true;
                                    txtSuite510RS.Text = iArea;

                                    chkSuite510RS.Enabled = false;
                                    txtSuite510RS.Enabled = false;
                                }
                                break;
                            case "6":
                                if (iSuiteNo == "601")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite601.Checked = true;
                                    txtSuite601.Text = iArea;
                                    txtSuite601KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite601.Enabled = false;
                                        txtSuite601.Enabled = false;
                                        txtSuite601KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite601.Enabled = true;
                                            txtSuite601.Enabled = true;
                                            txtSuite601KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite601RS.Checked = true;
                                    txtSuite601RS.Text = iArea;

                                    chkSuite601RS.Enabled = false;
                                    txtSuite601RS.Enabled = false;
                                }
                                if (iSuiteNo == "605")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite605.Checked = true;
                                    txtSuite605.Text = iArea;
                                    txtSuite605KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite605.Enabled = false;
                                        txtSuite605.Enabled = false;
                                        txtSuite605KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite605.Enabled = true;
                                            txtSuite605.Enabled = true;
                                            txtSuite605KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite605RS.Checked = true;
                                    txtSuite605RS.Text = iArea;

                                    chkSuite605RS.Enabled = false;
                                    txtSuite605RS.Enabled = false;
                                }
                                if (iSuiteNo == "610")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite610.Checked = true;
                                    txtSuite610.Text = iArea;
                                    txtSuite610KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite610.Enabled = false;
                                        txtSuite610.Enabled = false;
                                        txtSuite610KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite610.Enabled = true;
                                            txtSuite610.Enabled = true;
                                            txtSuite610KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite610RS.Checked = true;
                                    txtSuite610RS.Text = iArea;

                                    chkSuite610RS.Enabled = false;
                                    txtSuite610RS.Enabled = false;
                                }

                                break;
                            case "7":
                                if (iSuiteNo == "701")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite701.Checked = true;
                                    txtSuite701.Text = iArea;
                                    txtSuite701KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite701.Enabled = false;
                                        txtSuite701.Enabled = false;
                                        txtSuite701KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite701.Enabled = true;
                                            txtSuite701.Enabled = true;
                                            txtSuite701KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite701RS.Checked = true;
                                    txtSuite701RS.Text = iArea;

                                    chkSuite701RS.Enabled = false;
                                    txtSuite701RS.Enabled = false;
                                }
                                if (iSuiteNo == "705")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite705.Checked = true;
                                    txtSuite705.Text = iArea;
                                    txtSuite705KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite705.Enabled = false;
                                        txtSuite705.Enabled = false;
                                        txtSuite705KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite705.Enabled = true;
                                            txtSuite705.Enabled = true;
                                            txtSuite705KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite705RS.Checked = true;
                                    txtSuite705RS.Text = iArea;

                                    chkSuite705RS.Enabled = false;
                                    txtSuite705RS.Enabled = false;
                                }
                                if (iSuiteNo == "710")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite710.Checked = true;
                                    txtSuite710.Text = iArea;
                                    txtSuite710KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite710.Enabled = false;
                                        txtSuite710.Enabled = false;
                                        txtSuite710KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite710.Enabled = true;
                                            txtSuite710.Enabled = true;
                                            txtSuite710KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite710RS.Checked = true;
                                    txtSuite710RS.Text = iArea;

                                    chkSuite710RS.Enabled = false;
                                    txtSuite710RS.Enabled = false;
                                }

                                break;
                            case "8":
                                if (iSuiteNo == "801")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite801.Checked = true;
                                    txtSuite801.Text = iArea;
                                    txtSuite801KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite801.Enabled = false;
                                        txtSuite801.Enabled = false;
                                        txtSuite801KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite801.Enabled = true;
                                            txtSuite801.Enabled = true;
                                            txtSuite801KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite801RS.Checked = true;
                                    txtSuite801RS.Text = iArea;

                                    chkSuite801RS.Enabled = false;
                                    txtSuite801RS.Enabled = false;
                                }
                                if (iSuiteNo == "805")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite805.Checked = true;
                                    txtSuite805.Text = iArea;
                                    txtSuite805KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite805.Enabled = false;
                                        txtSuite805.Enabled = false;
                                        txtSuite805KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite805.Enabled = true;
                                            txtSuite805.Enabled = true;
                                            txtSuite805KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite805RS.Checked = true;
                                    txtSuite805RS.Text = iArea;

                                    chkSuite805RS.Enabled = false;
                                    txtSuite805RS.Enabled = false;
                                }
                                if (iSuiteNo == "810")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite810.Checked = true;
                                    txtSuite810.Text = iArea;
                                    txtSuite810KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite810.Enabled = false;
                                        txtSuite810.Enabled = false;
                                        txtSuite810KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite810.Enabled = true;
                                            txtSuite810.Enabled = true;
                                            txtSuite810KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite810RS.Checked = true;
                                    txtSuite810RS.Text = iArea;

                                    chkSuite810RS.Enabled = false;
                                    txtSuite810RS.Enabled = false;
                                }

                                break;
                            case "9":
                                if (iSuiteNo == "901")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite901.Checked = true;
                                    txtSuite901.Text = iArea;
                                    txtSuite901KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite901.Enabled = false;
                                        txtSuite901.Enabled = false;
                                        txtSuite901KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite901.Enabled = true;
                                            txtSuite901.Enabled = true;
                                            txtSuite901KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite901RS.Checked = true;
                                    txtSuite901RS.Text = iArea;

                                    chkSuite901RS.Enabled = false;
                                    txtSuite901RS.Enabled = false;
                                }
                                if (iSuiteNo == "905")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite905.Checked = true;
                                    txtSuite905.Text = iArea;
                                    txtSuite905KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite905.Enabled = false;
                                        txtSuite905.Enabled = false;
                                        txtSuite905KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite905.Enabled = true;
                                            txtSuite905.Enabled = true;
                                            txtSuite905KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite905RS.Checked = true;
                                    txtSuite905RS.Text = iArea;

                                    chkSuite905RS.Enabled = false;
                                    txtSuite905RS.Enabled = false;
                                }
                                if (iSuiteNo == "910")
                                {
                                    dSuite = dSuite + iSuiteNo + ", ";

                                    chkSuite910.Checked = true;
                                    txtSuite910.Text = iArea;
                                    txtSuite910KVA.Text = iKVA;

                                    if (Session["DetailCFS"] != null)
                                    {
                                        chkSuite910.Enabled = false;
                                        txtSuite910.Enabled = false;
                                        txtSuite910KVA.Enabled = false;
                                    }
                                    else
                                    {
                                        if (Session["SuiteNo"].ToString() == iSuiteNo)
                                        {
                                            chkSuite910.Enabled = true;
                                            txtSuite910.Enabled = true;
                                            txtSuite910KVA.Enabled = true;
                                        }
                                    }

                                    chkSuite910RS.Checked = true;
                                    txtSuite910RS.Text = iArea;

                                    chkSuite910RS.Enabled = false;
                                    txtSuite910RS.Enabled = false;
                                }

                                break;
                        }
                    }
                }
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "getSuite", me.Message);
            }

        }
        private void getData()
        {
            try
            {
                clearText();

                ds = Db.get_list("execute spGetCFS_Query " + Session["EditIDCFS"]);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    lblID.Text = ds.Tables[0].Rows[0]["ID"].ToString();

                    lblCID.Text = "CID-" + ds.Tables[0].Rows[0]["CodeLoB"].ToString() + "-" +
                                            ds.Tables[0].Rows[0]["CodePropertyName"].ToString() + "-" +
                                            ds.Tables[0].Rows[0]["CodeSeqNo"].ToString() + '-' +
                                            ds.Tables[0].Rows[0]["CodeYear"].ToString() +
                                            ds.Tables[0].Rows[0]["CodeMonth"].ToString();

                    if (ds.Tables[0].Rows[0]["IsInternal"].ToString() == "False")
                        {chkIsTenant.Checked = true;}else { chkIsTenant.Checked = false; }

                    txtNPWP.Text = ds.Tables[0].Rows[0]["NPWP"].ToString();
                    txtLOODate.Text = ds.Tables[0].Rows[0]["LOODate"].ToString();
                    txtLOODate.Enabled = false;

                    txtCompanyName.Text = ds.Tables[0].Rows[0]["Name"].ToString();
                    txtAddress.Text = ds.Tables[0].Rows[0]["Address"].ToString();
                    txtCity.Text = ds.Tables[0].Rows[0]["City"].ToString();
                    txtZIP.Text = ds.Tables[0].Rows[0]["ZIP"].ToString();
                    txtTelp.Text = ds.Tables[0].Rows[0]["Phone"].ToString();

                    txtPIC1Name.Text = ds.Tables[0].Rows[0]["PIC1Name"].ToString();
                    txtPIC1Position.Text = ds.Tables[0].Rows[0]["PIC1Position"].ToString();
                    txtPIC1MobilePh.Text = ds.Tables[0].Rows[0]["PIC1MobilePhone"].ToString();
                    txtPIC1Email.Text = ds.Tables[0].Rows[0]["PIC1Email"].ToString();
                    txtPIC2Name.Text = ds.Tables[0].Rows[0]["PIC2Name"].ToString();
                    txtPIC2Position.Text = ds.Tables[0].Rows[0]["PIC2Position"].ToString();
                    txtPIC2MobilePh.Text = ds.Tables[0].Rows[0]["PIC2MobilePhone"].ToString();
                    txtPIC2Email.Text = ds.Tables[0].Rows[0]["PIC2Email"].ToString();
                    txtPIC3Name.Text = ds.Tables[0].Rows[0]["PIC3Name"].ToString();
                    txtPIC3Position.Text = ds.Tables[0].Rows[0]["PIC3Position"].ToString();
                    txtPIC3MobilePh.Text = ds.Tables[0].Rows[0]["PIC3MobilePhone"].ToString();
                    txtPIC3Email.Text = ds.Tables[0].Rows[0]["PIC3Email"].ToString();

                    cmbLoB.SelectedValue = ds.Tables[0].Rows[0]["CodeLoB"].ToString();
                    txtLoB.Text = ds.Tables[0].Rows[0]["LoBOther"].ToString();
                    cmbNoE.Text = ds.Tables[0].Rows[0]["TotEmp"].ToString();
                    cmbLoB.Enabled = false;
                    txtLoB.Enabled = false;

                    txtSpecialConditions.Text = ds.Tables[0].Rows[0]["Note"].ToString();
                    txtFittingOutDate.Text = ds.Tables[0].Rows[0]["Fitting"].ToString();

                    txtServiceCommencementDate.Text = ds.Tables[0].Rows[0]["ServiceComm"].ToString();
                    txtRentCommencementDate.Text = ds.Tables[0].Rows[0]["RentComm"].ToString();

                    txtProsTelpLineCharge.Text = ds.Tables[0].Rows[0]["ProsTelpLineCharge"].ToString();

                    string iRCars = ds.Tables[0].Rows[0]["ProsReservedCar"].ToString();
                    string iUCars = ds.Tables[0].Rows[0]["ProsUnReservedCar"].ToString();
                    string iRMotos = ds.Tables[0].Rows[0]["ProsReservedMotor"].ToString();
                    string iTL = ds.Tables[0].Rows[0]["ProsTelpLine"].ToString();
                    

                    //suite
                    getSuite(Session["EditIDCFS"].ToString());

                    lblProposedSuite.Text = dSuite;

                    //option
                    getReservedParking(iRCars, iUCars, iRMotos, iTL);
                }
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "getData", me.Message);
            }
        }

        private void getContractID(string iID)
        {
            try
            {
                ds = Db.get_list("execute spGetCFSContract_Query " + iID);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    txtContractNo.Text = ds.Tables[0].Rows[0]["ContractNo"].ToString();
                    txtContractExpiredDate.Text = ds.Tables[0].Rows[0]["ContractDate"].ToString();
                    txtContractPeriod.Text = ds.Tables[0].Rows[0]["ContractPeriod"].ToString();
                    txtMemorandumNo.Text = ds.Tables[0].Rows[0]["MemorandumNo"].ToString();
                    txtMemorandumExpiredDate.Text = ds.Tables[0].Rows[0]["MemorandumDate"].ToString();
                    txtContractNote.Text = ds.Tables[0].Rows[0]["Note"].ToString();

                    bRes = true;
                }
                
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "getData", me.Message);
            }
        }

        private void executeAddCFS(string iCodeLoB, string iLoBOther, string iCodePropertyName, string iSeqNo, string iMonth, string iYear,string iLOOSignedDate, 
                        string iNPWP, string iCompanyName, string iAddress, string iCity, string iZIP, string iTelp,
                        string iPIC1Name, string iPIC1Position, string iPIC1Email, string iPIC1MobilePh,
                        string iPIC2Name, string iPIC2Position, string iPIC2Email, string iPIC2MobilePh,
                        string iPIC3Name, string iPIC3Position, string iPIC3Email, string iPIC3MobilePh,
                        string iNoEmployees, int iRCars, int iUCars, int iRMotos, int iTL, int iTLCharge, string iSpecialConds,
                        string iServiceCommDate, string iRentCommDate, string iFittingOutDate, string iIsTenant)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spInsertCFS", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@CID", "CID");
                cmd.Parameters.AddWithValue("@CodeLoB", iCodeLoB);
                cmd.Parameters.AddWithValue("@CodePropertyName", iCodePropertyName);
                cmd.Parameters.AddWithValue("@CodeSeqNo", iSeqNo);
                cmd.Parameters.AddWithValue("@CodeMonth", iMonth);
                cmd.Parameters.AddWithValue("@CodeYear", iYear);

                cmd.Parameters.AddWithValue("@NPWP", iNPWP);
                cmd.Parameters.AddWithValue("@LOOSignedDate", iLOOSignedDate);
                cmd.Parameters.AddWithValue("@Name", iCompanyName);
                cmd.Parameters.AddWithValue("@Address", iAddress);
                cmd.Parameters.AddWithValue("@City", iCity);
                cmd.Parameters.AddWithValue("@ZIP", iZIP);
                cmd.Parameters.AddWithValue("@Phone", iTelp);
                cmd.Parameters.AddWithValue("@PIC1Name", iPIC1Name);
                cmd.Parameters.AddWithValue("@PIC1Position", iPIC1Position);
                cmd.Parameters.AddWithValue("@PIC1MobilePhone", iPIC1MobilePh);
                cmd.Parameters.AddWithValue("@PIC1Email", iPIC1Email);
                cmd.Parameters.AddWithValue("@PIC2Name", iPIC2Name);
                cmd.Parameters.AddWithValue("@PIC2Position", iPIC2Position);
                cmd.Parameters.AddWithValue("@PIC2MobilePhone", iPIC2MobilePh);
                cmd.Parameters.AddWithValue("@PIC2Email", iPIC2Email);
                cmd.Parameters.AddWithValue("@PIC3Name", iPIC3Name);
                cmd.Parameters.AddWithValue("@PIC3Position", iPIC3Position);
                cmd.Parameters.AddWithValue("@PIC3MobilePhone", iPIC3MobilePh);
                cmd.Parameters.AddWithValue("@PIC3Email", iPIC3Email);
                cmd.Parameters.AddWithValue("@LoBOther", iLoBOther);
                cmd.Parameters.AddWithValue("@TotEmp", iNoEmployees);
                cmd.Parameters.AddWithValue("@ProsReservedCar", iRCars);
                cmd.Parameters.AddWithValue("@ProsUnReservedCar", iUCars);
                cmd.Parameters.AddWithValue("@ProsReservedMotor", iRMotos);
                cmd.Parameters.AddWithValue("@ProsTelpLine", iTL);
                cmd.Parameters.AddWithValue("@ProsTelpLineCharge", iTLCharge);
                cmd.Parameters.AddWithValue("@Note", iSpecialConds);
                cmd.Parameters.AddWithValue("@ServiceCommDate", iServiceCommDate);
                cmd.Parameters.AddWithValue("@RentCommDate", iRentCommDate);
                cmd.Parameters.AddWithValue("@FittingOutDate", iFittingOutDate);
                cmd.Parameters.AddWithValue("@IsTenant", iIsTenant);

                cmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeAddCFS", me.Message);
            }

        }

        private void executeEditCFS(string iID, string iNPWP, string iCompanyName, string iAddress, string iCity, string iZIP, string iTelp,
                        string iPIC1Name, string iPIC1Position, string iPIC1Email, string iPIC1MobilePh,
                        string iPIC2Name, string iPIC2Position, string iPIC2Email, string iPIC2MobilePh,
                        string iPIC3Name, string iPIC3Position, string iPIC3Email, string iPIC3MobilePh,
                        string iNoEmployees, int iRCars, int iUCars, int iRMotos, int iTL, int iTLCharge, string iSpecialConds,
                        string iServiceCommDate, string iRentCommDate, string iFittingOutDate, string iIsTenant)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spUpdateCFS", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@ID", Session["EditIDCFS"].ToString());
                cmd.Parameters.AddWithValue("@CID", "CID");

                cmd.Parameters.AddWithValue("@NPWP", iNPWP);
                cmd.Parameters.AddWithValue("@Name", iCompanyName);
                cmd.Parameters.AddWithValue("@Address", iAddress);
                cmd.Parameters.AddWithValue("@City", iCity);
                cmd.Parameters.AddWithValue("@ZIP", iZIP);
                cmd.Parameters.AddWithValue("@Phone", iTelp);
                cmd.Parameters.AddWithValue("@PIC1Name", iPIC1Name);
                cmd.Parameters.AddWithValue("@PIC1Position", iPIC1Position);
                cmd.Parameters.AddWithValue("@PIC1MobilePhone", iPIC1MobilePh);
                cmd.Parameters.AddWithValue("@PIC1Email", iPIC1Email);
                cmd.Parameters.AddWithValue("@PIC2Name", iPIC2Name);
                cmd.Parameters.AddWithValue("@PIC2Position", iPIC2Position);
                cmd.Parameters.AddWithValue("@PIC2MobilePhone", iPIC2MobilePh);
                cmd.Parameters.AddWithValue("@PIC2Email", iPIC2Email);
                cmd.Parameters.AddWithValue("@PIC3Name", iPIC3Name);
                cmd.Parameters.AddWithValue("@PIC3Position", iPIC3Position);
                cmd.Parameters.AddWithValue("@PIC3MobilePhone", iPIC3MobilePh);
                cmd.Parameters.AddWithValue("@PIC3Email", iPIC3Email);
                cmd.Parameters.AddWithValue("@TotEmp", iNoEmployees);
                cmd.Parameters.AddWithValue("@ProsReservedCar", iRCars);
                cmd.Parameters.AddWithValue("@ProsUnReservedCar", iUCars);
                cmd.Parameters.AddWithValue("@ProsReservedMotor", iRMotos);
                cmd.Parameters.AddWithValue("@ProsTelpLine", iTL);
                cmd.Parameters.AddWithValue("@ProsTelpLineCharge", iTLCharge);
                cmd.Parameters.AddWithValue("@Note", iSpecialConds);
                cmd.Parameters.AddWithValue("@ServiceCommDate", iServiceCommDate);
                cmd.Parameters.AddWithValue("@RentCommDate", iRentCommDate);
                cmd.Parameters.AddWithValue("@FittingOutDate", iFittingOutDate);
                cmd.Parameters.AddWithValue("@IsTenant", iIsTenant);

                cmd.ExecuteNonQuery();
                conn.Close();
                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeEditCFS", me.Message);
            }

        }
        
        protected void executeAddSuite(string iCFSID, string iFloor, string iSuiteNo, string iArea, string iKVA,
                                    string iRentServicePeriod, string iRentServicePeriodMY, string iRentCharge, string iServiceCharge, string iOtherCharge,
                                    string iDepositPeriod, string iDepositPeriodMY, string iDepositRentCharge, string iDepositServiceCharge, string iDepositOtherCharge,
                                    string iRpcArea, string iRpcPeriod, string iRpcMY, string iRpcCharge,
                                    string iUnRpcArea, string iUnRpcPeriod, string iUnRpcMY, string iUnRpcCharge,
                                    string iRpmArea, string iRpmPeriod, string iRpmMY, string iRpmCharge,
                                    string iRpoArea, string iRpoPeriod, string iRpoMY, string iRpoCharge)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spInsertCFSSuite", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@CFSID", iCFSID);
                cmd.Parameters.AddWithValue("@Floor", iFloor);
                cmd.Parameters.AddWithValue("@SuiteNo", iSuiteNo);
                cmd.Parameters.AddWithValue("@Area", iArea);
                cmd.Parameters.AddWithValue("@KVA", iKVA);

                //add rental & service data
                cmd.Parameters.AddWithValue("@RentalArea",iArea);
                cmd.Parameters.AddWithValue("@RentalPeriod", iRentServicePeriod);
                cmd.Parameters.AddWithValue("@RentalPeriodMY", iRentServicePeriodMY);
                cmd.Parameters.AddWithValue("@RentalCharge", iRentCharge);
                cmd.Parameters.AddWithValue("@ServiceArea", iArea);
                cmd.Parameters.AddWithValue("@ServicePeriod", iRentServicePeriod);
                cmd.Parameters.AddWithValue("@ServicePeriodMY", iRentServicePeriodMY);
                cmd.Parameters.AddWithValue("@ServiceCharge", iServiceCharge);
                cmd.Parameters.AddWithValue("@OtherArea", iArea);
                cmd.Parameters.AddWithValue("@OtherPeriod", iRentServicePeriod);
                cmd.Parameters.AddWithValue("@OtherPeriodMY", iRentServicePeriodMY);
                cmd.Parameters.AddWithValue("@OtherCharge", iOtherCharge);

                //add deposit data
                cmd.Parameters.AddWithValue("@DepositRentalArea", iArea);
                cmd.Parameters.AddWithValue("@DepositRentalPeriod", iDepositPeriod);
                cmd.Parameters.AddWithValue("@DepositRentalPeriodMY", iDepositPeriodMY);
                cmd.Parameters.AddWithValue("@DepositRentalCharge", iDepositRentCharge);
                cmd.Parameters.AddWithValue("@DepositServiceArea", iArea);
                cmd.Parameters.AddWithValue("@DepositServicePeriod", iDepositPeriod);
                cmd.Parameters.AddWithValue("@DepositServicePeriodMY", iDepositPeriodMY);
                cmd.Parameters.AddWithValue("@DepositServiceCharge", iDepositServiceCharge);
                cmd.Parameters.AddWithValue("@DepositOtherArea", iArea);
                cmd.Parameters.AddWithValue("@DepositOtherPeriod", iDepositPeriod);
                cmd.Parameters.AddWithValue("@DepositOtherPeriodMY", iDepositPeriodMY);
                cmd.Parameters.AddWithValue("@DepositOtherCharge", iDepositOtherCharge);

                // add parking data
                cmd.Parameters.AddWithValue("@ParkingReservedArea", iRpcArea);
                cmd.Parameters.AddWithValue("@ParkingReservedPeriod", iRpcPeriod);
                cmd.Parameters.AddWithValue("@ParkingReservedMY", iRpcMY);
                cmd.Parameters.AddWithValue("@ParkingReservedCharge", iRpcCharge);
                cmd.Parameters.AddWithValue("@ParkingUnReservedArea", iUnRpcArea);
                cmd.Parameters.AddWithValue("@ParkingUnReservedPeriod", iUnRpcPeriod);
                cmd.Parameters.AddWithValue("@ParkingUnReservedMY", iUnRpcMY);
                cmd.Parameters.AddWithValue("@ParkingUnReservedCharge", iUnRpcCharge);
                cmd.Parameters.AddWithValue("@ParkingMotorcyleArea", iRpmArea);
                cmd.Parameters.AddWithValue("@ParkingMotorcylePeriod", iRpmPeriod);
                cmd.Parameters.AddWithValue("@ParkingMotorcyleMY", iRpmMY);
                cmd.Parameters.AddWithValue("@ParkingMotorcyleCharge", iRpmCharge);
                cmd.Parameters.AddWithValue("@ParkingOtherArea", iRpoArea);
                cmd.Parameters.AddWithValue("@ParkingOtherPeriod", iRpoPeriod);
                cmd.Parameters.AddWithValue("@ParkingOtherMY", iRpoMY);
                cmd.Parameters.AddWithValue("@ParkingOtherCharge", iRpoCharge);

                cmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeAddSuite", me.Message);
            }
        }

        protected void executeEditSuite(string iCFSID, string iID, string iFloor, string iSuiteNo, string iArea, string iKVA,
                                    string iRentServicePeriod, string iRentServicePeriodMY, string iRentCharge, string iServiceCharge, string iOtherCharge,
                                    string iDepositPeriod, string iDepositPeriodMY, string iDepositRentCharge, string iDepositServiceCharge, string iDepositOtherCharge,
                                    string iRpcArea, string iRpcPeriod, string iRpcMY, string iRpcCharge,
                                    string iUnRpcArea, string iUnRpcPeriod, string iUnRpcMY, string iUnRpcCharge,
                                    string iRpmArea, string iRpmPeriod, string iRpmMY, string iRpmCharge,
                                    string iRpoArea, string iRpoPeriod, string iRpoMY, string iRpoCharge)
        {
            //string connString = Db.GetConnectionString();

            try
            {
                //cek suite data sdh ada atau belum
                

                //get print date and due date
                string iSql = "select * from mCFSSuite where Status = 1 and CFSID = " + iCFSID + " And SuiteNo = " + iSuiteNo;
                ds = Db.get_list(iSql);

                if (ds.Tables[0].Rows.Count != 0)
                {
                    if (Session["SuiteNo"].ToString() != iSuiteNo)
                    {
                        bRes = true;
                        return;
                    }

                    SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                    conn.Open();

                    SqlCommand cmd = new SqlCommand("spUpdateCFSSuite", conn);
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                    cmd.Parameters.AddWithValue("@ID", iID);
                    cmd.Parameters.AddWithValue("@CFSID", iCFSID);
                    cmd.Parameters.AddWithValue("@Floor", iFloor);
                    cmd.Parameters.AddWithValue("@SuiteNo", iSuiteNo);
                    cmd.Parameters.AddWithValue("@Area", iArea);
                    cmd.Parameters.AddWithValue("@KVA", iKVA);


                    //add rental & service data
                    cmd.Parameters.AddWithValue("@RentalArea", iArea);
                    cmd.Parameters.AddWithValue("@RentalPeriod", iRentServicePeriod);
                    cmd.Parameters.AddWithValue("@RentalPeriodMY", iRentServicePeriodMY);
                    cmd.Parameters.AddWithValue("@RentalCharge", iRentCharge);
                    cmd.Parameters.AddWithValue("@ServiceArea", iArea);
                    cmd.Parameters.AddWithValue("@ServicePeriod", iRentServicePeriod);
                    cmd.Parameters.AddWithValue("@ServicePeriodMY", iRentServicePeriodMY);
                    cmd.Parameters.AddWithValue("@ServiceCharge", iServiceCharge);
                    cmd.Parameters.AddWithValue("@OtherArea", iArea);
                    cmd.Parameters.AddWithValue("@OtherPeriod", iRentServicePeriod);
                    cmd.Parameters.AddWithValue("@OtherPeriodMY", iRentServicePeriodMY);
                    cmd.Parameters.AddWithValue("@OtherCharge", iOtherCharge);

                    //add deposit data
                    cmd.Parameters.AddWithValue("@DepositRentalArea", iArea);
                    cmd.Parameters.AddWithValue("@DepositRentalPeriod", iDepositPeriod);
                    cmd.Parameters.AddWithValue("@DepositRentalPeriodMY", iDepositPeriodMY);
                    cmd.Parameters.AddWithValue("@DepositRentalCharge", iDepositRentCharge);
                    cmd.Parameters.AddWithValue("@DepositServiceArea", iArea);
                    cmd.Parameters.AddWithValue("@DepositServicePeriod", iDepositPeriod);
                    cmd.Parameters.AddWithValue("@DepositServicePeriodMY", iDepositPeriodMY);
                    cmd.Parameters.AddWithValue("@DepositServiceCharge", iDepositServiceCharge);
                    cmd.Parameters.AddWithValue("@DepositOtherArea", iArea);
                    cmd.Parameters.AddWithValue("@DepositOtherPeriod", iDepositPeriod);
                    cmd.Parameters.AddWithValue("@DepositOtherPeriodMY", iDepositPeriodMY);
                    cmd.Parameters.AddWithValue("@DepositOtherCharge", iDepositOtherCharge);

                    // add parking data
                    cmd.Parameters.AddWithValue("@ParkingReservedArea", iRpcArea);
                    cmd.Parameters.AddWithValue("@ParkingReservedPeriod", iRpcPeriod);
                    cmd.Parameters.AddWithValue("@ParkingReservedMY", iRpcMY);
                    cmd.Parameters.AddWithValue("@ParkingReservedCharge", iRpcCharge);
                    cmd.Parameters.AddWithValue("@ParkingUnReservedArea", iUnRpcArea);
                    cmd.Parameters.AddWithValue("@ParkingUnReservedPeriod", iUnRpcPeriod);
                    cmd.Parameters.AddWithValue("@ParkingUnReservedMY", iUnRpcMY);
                    cmd.Parameters.AddWithValue("@ParkingUnReservedCharge", iUnRpcCharge);
                    cmd.Parameters.AddWithValue("@ParkingMotorcyleArea", iRpmArea);
                    cmd.Parameters.AddWithValue("@ParkingMotorcylePeriod", iRpmPeriod);
                    cmd.Parameters.AddWithValue("@ParkingMotorcyleMY", iRpmMY);
                    cmd.Parameters.AddWithValue("@ParkingMotorcyleCharge", iRpmCharge);
                    cmd.Parameters.AddWithValue("@ParkingOtherArea", iRpoArea);
                    cmd.Parameters.AddWithValue("@ParkingOtherPeriod", iRpoPeriod);
                    cmd.Parameters.AddWithValue("@ParkingOtherMY", iRpoMY);
                    cmd.Parameters.AddWithValue("@ParkingOtherCharge", iRpoCharge);

                    cmd.ExecuteNonQuery();
                    conn.Close();

                    bRes = true;
                }
                else
                {
                    executeAddSuite(iCFSID, iFloor, iSuiteNo, iArea, iKVA,
                    iRentServicePeriod, iRentServicePeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge,
                    iRpcArea, iRpcPeriod, iRpcMY, iRpcCharge,
                    iUnRpcArea, iUnRpcPeriod, iUnRpcMY, iUnRpcCharge,
                    iRpmArea, iRpmPeriod, iRpmMY, iRpmCharge,
                    iRpoArea, iRpoPeriod, iRpoMY, iOtherCharge);
                }                           
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeEditSuite", me.Message);
            }
        }

        private void executeAddContract(string iCFSID, string iContractNo, string iContractExpiredDate, 
                                    string iMemorandumNo, string iMemorandumExpiredDate, string iNote, string iContractPeriod)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spInsertCFSContract", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@CFSID", iCFSID);
                cmd.Parameters.AddWithValue("@ContractNo", iContractNo);
                cmd.Parameters.AddWithValue("@ContractExpiredDate", iContractExpiredDate);
                cmd.Parameters.AddWithValue("@ContractPeriod", iContractPeriod);
                cmd.Parameters.AddWithValue("@MemorandumNo", iMemorandumNo);
                cmd.Parameters.AddWithValue("@MemorandumExpiredDate", iMemorandumExpiredDate);
                cmd.Parameters.AddWithValue("@Note", iNote);
                cmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeAddContract", me.Message);
            }
        }

        private void executeEditContract(string iID, string iCFSID, string iContractNo, string iContractExpiredDate,
                                    string iMemorandumNo, string iMemorandumExpiredDate, string iNote, string iContractPeriod)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spUpdateCFSContract", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@ID", iID);                
                cmd.Parameters.AddWithValue("@CFSID", iCFSID);
                cmd.Parameters.AddWithValue("@ContractNo", iContractNo);
                cmd.Parameters.AddWithValue("@ContractExpiredDate", iContractExpiredDate);
                cmd.Parameters.AddWithValue("@ContractPeriod", iContractPeriod);
                cmd.Parameters.AddWithValue("@MemorandumNo", iMemorandumNo);
                cmd.Parameters.AddWithValue("@MemorandumExpiredDate", iMemorandumExpiredDate);
                cmd.Parameters.AddWithValue("@Note", iNote);
                cmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeEditContract", me.Message);
            }
        }

        private void executeAddParking(string iCFSID, string iParkingType, string iLot, string iPeriod,
                                    string iPeriodMY, string iPrice, string iLicenseNo, string iStartDate)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spInsertCFSParking", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@CFSID", iCFSID);
                cmd.Parameters.AddWithValue("@ParkingType", iParkingType);
                cmd.Parameters.AddWithValue("@Lot", iLot);
                cmd.Parameters.AddWithValue("@Period", iPeriod);
                cmd.Parameters.AddWithValue("@PeriodMY", iPeriodMY);
                cmd.Parameters.AddWithValue("@Price", iPrice);
                cmd.Parameters.AddWithValue("@LicenseNo", iLicenseNo);
                cmd.Parameters.AddWithValue("@StartDate", iStartDate);
                cmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeAddParking", me.Message);
            }
        }

        private void executeEditParking(string iID, string iCFSID, string iParkingType, string iLot, string iPeriod,
                                    string iPeriodMY, string iPrice, string iLicenseNo, string iStartDate)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();

                SqlCommand cmd = new SqlCommand("spUpdateCFSParking", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserID", (HttpContext.Current.Session["userid"].ToString()));
                cmd.Parameters.AddWithValue("@ID", iID);
                cmd.Parameters.AddWithValue("@CFSID", iCFSID);
                cmd.Parameters.AddWithValue("@ParkingType", iParkingType);
                cmd.Parameters.AddWithValue("@Lot", iLot);
                cmd.Parameters.AddWithValue("@Period", iPeriod);
                cmd.Parameters.AddWithValue("@PeriodMY", iPeriodMY);
                cmd.Parameters.AddWithValue("@Price", iPrice);
                cmd.Parameters.AddWithValue("@LicenseNo", iLicenseNo);
                cmd.Parameters.AddWithValue("@StartDate", iStartDate);
                cmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeEditParking", me.Message);
            }
        }

        protected void executeRemoveSuite(string iSuiteID)
        {
            Boolean iHasil = false;

            switch (iSuiteID)
            {
                case "101":
                    if (!chkSuite101.Checked) { iHasil = true; }
                    break;
                case "110":
                    if (!chkSuite110.Checked) { iHasil = true; }
                    break;
                case "201":
                    if (!chkSuite201.Checked) { iHasil = true; }
                    break;
                case "205":
                    if (!chkSuite210.Checked) { iHasil = true; }
                    break;
                case "301":
                    if (!chkSuite301.Checked) { iHasil = true; }
                    break;
                case "305":
                    if (!chkSuite305.Checked) { iHasil = true; }
                    break;
                case "310":
                    if (!chkSuite310.Checked) { iHasil = true; }
                    break;
                case "501":
                    if (!chkSuite501.Checked) { iHasil = true; }
                    break;
                case "505":
                    if (!chkSuite505.Checked) { iHasil = true; }
                    break;
                case "510":
                    if (!chkSuite510.Checked) { iHasil = true; }
                    break;
                case "601":
                    if (!chkSuite601.Checked) { iHasil = true; }
                    break;
                case "605":
                    if (!chkSuite605.Checked) { iHasil = true; }
                    break;
                case "610":
                    if (!chkSuite610.Checked) { iHasil = true; }
                    break;
                case "701":
                    if (!chkSuite701.Checked) { iHasil = true; }
                    break;
                case "705":
                    if (!chkSuite705.Checked) { iHasil = true; }
                    break;
                case "710":
                    if (!chkSuite710.Checked) { iHasil = true; }
                    break;
                case "801":
                    if (!chkSuite801.Checked) { iHasil = true; }
                    break;
                case "805":
                    if (!chkSuite805.Checked) { iHasil = true; }
                    break;
                case "810":
                    if (!chkSuite810.Checked) { iHasil = true; }
                    break;
                case "901":
                    if (!chkSuite901.Checked) { iHasil = true; }
                    break;
                case "905":
                    if (!chkSuite905.Checked) { iHasil = true; }
                    break;
                case "910":
                    if (!chkSuite910.Checked) { iHasil = true; }
                    break;
            }
            
            if (iHasil)
            {
                executeDelete("mCFSSuite", iSuiteID,
                    "Un selected from CFS form.", HttpContext.Current.Session["userid"].ToString());
            }            
        }

        protected void executeAddData()
        {
            //string iUserID, string iNPWP, string iLOODate, string iCompanyName, string iAddress, 
            //            string iCity, string iZIP, string iTelp, 
            //            string iPIC1Name, string iPIC1Position, string iPIC1MobilePh, string iPIC1Email,
            //            string iPIC2Name, string iPIC2Position, string iPIC2MobilePh, string iPIC2Email,
            //            string iPIC3Name, string iPIC3Position, string iPIC3MobilePh, string iPIC3Email,
            //            string iLoB, string iLoBOther, string iNoEmployees, string iRCars, string iUCars, string iRMotor, string iSpecialConditions
            
            string iNPWP = txtNPWP.Text.Trim();

            if (txtLOODate.Text == "") { txtLOODate.Text = "01-01-1900"; }

            DateTime iLOODate = DateTime.ParseExact(txtLOODate.Text.Trim(), "dd-MM-yyyy", CultureInfo.InvariantCulture);
            DateTime iFittingOutDate = DateTime.ParseExact(txtFittingOutDate.Text.Trim(), "dd-MM-yyyy", CultureInfo.InvariantCulture);

            string iY;
            string iLOOYear;
            string rMon;
            string iMon;
            string iIsTenant;

            iY =iLOODate.Year.ToString();
            iLOOYear = Str.Right(iY, 2);

            if (chkIsTenant.Checked) { iIsTenant = "0"; }else { iIsTenant = "1"; }

            if (txtLOODate.Text == "01-01-1900")
            {
                iMon = "00";
            }
            else
            {
                rMon = iLOODate.Month.ToString();

                iMon = "";
                if (rMon.Length == 1)
                {
                    iMon = "0" + rMon;
                }
                else { iMon = rMon; }
            }

            string iLOOMonth = iMon;
            string iPropertyName = "10";

            string iCFSSeq = getCFSSeqNumber(iLOOYear);

            string iCompanyName = txtCompanyName.Text.Trim();
            string iAddress = txtAddress.Text.Trim();
            string iCity = txtCity.Text.Trim();
            string iZIP = txtZIP.Text.Trim();
            string iTelp = txtTelp.Text.Trim();

            string iPIC1Name = txtPIC1Name.Text.Trim();
            string iPIC1Position = txtPIC1Position.Text.Trim();
            string iPIC1MobilePh = txtPIC1MobilePh.Text.Trim();
            string iPIC1Email = txtPIC1Email.Text.Trim();
            string iPIC2Name = txtPIC2Name.Text.Trim();
            string iPIC2Position = txtPIC2Position.Text.Trim();
            string iPIC2MobilePh = txtPIC2MobilePh.Text.Trim();
            string iPIC2Email = txtPIC2Email.Text.Trim();
            string iPIC3Name = txtPIC3Name.Text.Trim();
            string iPIC3Position = txtPIC3Position.Text.Trim();
            string iPIC3MobilePh = txtPIC3MobilePh.Text.Trim();
            string iPIC3Email = txtPIC3Email.Text.Trim();

            string iLoB = cmbLoB.SelectedValue.ToString();
            string iLoBOther = txtLoB.Text.Trim();
            string iNoEmployees = cmbNoE.SelectedValue.ToString();

            int iRCars = 0;
            int iUCars = 0;
            int iRMotos = 0;
            int iTL = 0;
            int iTLCharge = 0;

            string iRpcPeriod = "0";
            string iRpcMY = "Month(s)";
            string iRpcCharge ="0";

            string iUpcPeriod = "0";
            string iUpcMY = "Month(s)";
            string iUpcCharge = "0";

            string iRpmPeriod = "0";
            string iRpmMY = "Month(s)";
            string iRpmCharge = "0";

            string iRentPeriod = "0";
            string iRentPeriodMY = "Month(s)";
            string iRentCharge = "0";
            string iServiceCharge = "0";
            string iOtherCharge = "0";
            string iDepositPeriod = "0";
            string iDepositPeriodMY = "Month(s)";
            string iDepositRentCharge = "0";
            string iDepositServiceCharge = "0";
            string iDepositOtherCharge = "0";

            if (txtRentPeriod.Text.Trim() == "") { iRentPeriod ="0"; } else { iRentPeriod = txtRentPeriod.Text.Trim(); };
            if (ddlRentPeriod.SelectedValue.ToString() == "") { iRentPeriodMY = "Month(s)"; } else { iRentPeriodMY = ddlRentPeriod.SelectedValue.ToString(); };
            if (txtRentCharge.Text.Trim() == "") { iRentCharge = "0"; } else { iRentCharge = txtRentCharge.Text.Trim(); };
            if (txtServiceCharge.Text.Trim() == "") { iServiceCharge = "0"; } else { iServiceCharge = txtServiceCharge.Text.Trim(); };
            if (txtOtherCharge.Text.Trim() == "") { iOtherCharge = "0"; } else { iOtherCharge = txtOtherCharge.Text.Trim(); };
            if (txtDepositPeriod.Text.Trim() == "") { iDepositPeriod = "0"; } else { iDepositPeriod = txtDepositPeriod.Text.Trim(); };
            if (ddlDepositPeriod.SelectedValue.ToString() == "") { iDepositPeriodMY = "0"; } else { iDepositPeriodMY = ddlDepositPeriod.SelectedValue.ToString(); };
            if (txtDepositRentCharge.Text.Trim() == "") { iDepositRentCharge = "0"; } else { iDepositRentCharge = txtDepositRentCharge.Text.Trim(); };
            if (txtDepositServiceCharge.Text.Trim() == "") { iDepositServiceCharge = "0"; } else { iDepositServiceCharge = txtDepositServiceCharge.Text.Trim(); };
            if (txtDepositOtherCharge.Text.Trim() == "") { iDepositOtherCharge = "0"; } else { iDepositOtherCharge = txtDepositOtherCharge.Text.Trim(); };

            if (rbRCars1.Checked) { iRCars = 1; }
            if (rbRCars2.Checked) { iRCars = 2; }
            if (rbRCars3.Checked) { iRCars = 3; }
            if (rbRCars4.Checked) { iRCars = 4; }
            if (rbRCars5.Checked) { iRCars = 5; }
            if (rbRCars6.Checked) { iRCars = 6; }
            if (rbRCars7.Checked) { iRCars = 7; }
            if (rbRCars8.Checked) { iRCars = 8; }
            if (rbRCars9.Checked) { iRCars = 9; }
            if (rbRCars10.Checked) { iRCars = 10; }

            if (rbRCars11.Checked) { iRCars = 11; }
            if (rbRCars12.Checked) { iRCars = 12; }
            if (rbRCars13.Checked) { iRCars = 13; }
            if (rbRCars14.Checked) { iRCars = 14; }
            if (rbRCars15.Checked) { iRCars = 15; }
            if (rbRCars16.Checked) { iRCars = 16; }
            if (rbRCars17.Checked) { iRCars = 17; }
            if (rbRCars18.Checked) { iRCars = 18; }
            if (rbRCars19.Checked) { iRCars = 19; }
            if (rbRCars20.Checked) { iRCars = 20; }

            if (rbRCars21.Checked) { iRCars = 21; }
            if (rbRCars22.Checked) { iRCars = 22; }
            if (rbRCars23.Checked) { iRCars = 23; }
            if (rbRCars24.Checked) { iRCars = 24; }
            if (rbRCars25.Checked) { iRCars = 25; }
            if (rbRCars26.Checked) { iRCars = 26; }
            if (rbRCars27.Checked) { iRCars = 27; }
            if (rbRCars28.Checked) { iRCars = 28; }
            if (rbRCars29.Checked) { iRCars = 29; }
            if (rbRCars30.Checked) { iRCars = 30; }

            if (txtRpcPeriod.Text.Trim() != "") { iRpcPeriod = txtRpcPeriod.Text.ToString(); }
            if (ddlRpc.SelectedValue.Trim() != "") { iRpcMY = ddlRpc.SelectedValue.ToString(); }
            if (txtRpcCharge.Text.Trim() != "") { iRpcCharge = txtRpcCharge.Text.ToString(); }

            if (rbUCars1.Checked) { iUCars = 1; }
            if (rbUCars2.Checked) { iUCars = 2; }
            if (rbUCars3.Checked) { iUCars = 3; }
            if (rbUCars4.Checked) { iUCars = 4; }
            if (rbUCars5.Checked) { iUCars = 5; }
            if (rbUCars6.Checked) { iUCars = 6; }
            if (rbUCars7.Checked) { iUCars = 7; }
            if (rbUCars8.Checked) { iUCars = 8; }
            if (rbUCars9.Checked) { iUCars = 9; }
            if (rbUCars10.Checked) { iUCars = 10; }

            if (rbUCars11.Checked) { iUCars = 11; }
            if (rbUCars12.Checked) { iUCars = 12; }
            if (rbUCars13.Checked) { iUCars = 13; }
            if (rbUCars14.Checked) { iUCars = 14; }
            if (rbUCars15.Checked) { iUCars = 15; }
            if (rbUCars16.Checked) { iUCars = 16; }
            if (rbUCars17.Checked) { iUCars = 17; }
            if (rbUCars18.Checked) { iUCars = 18; }
            if (rbUCars19.Checked) { iUCars = 19; }
            if (rbUCars20.Checked) { iUCars = 20; }

            if (rbUCars21.Checked) { iUCars = 21; }
            if (rbUCars22.Checked) { iUCars = 22; }
            if (rbUCars23.Checked) { iUCars = 23; }
            if (rbUCars24.Checked) { iUCars = 24; }
            if (rbUCars25.Checked) { iUCars = 25; }
            if (rbUCars26.Checked) { iUCars = 26; }
            if (rbUCars27.Checked) { iUCars = 27; }
            if (rbUCars28.Checked) { iUCars = 28; }
            if (rbUCars29.Checked) { iUCars = 29; }
            if (rbUCars30.Checked) { iUCars = 30; }

            if (txtUrcPeriod.Text.Trim() != "") { iUpcPeriod = txtUrcPeriod.Text.ToString(); }
            if (ddlUrc.SelectedValue.Trim() != "") { iUpcMY = ddlUrc.SelectedValue.ToString(); }
            if (txtUrcCharge.Text.Trim() != "") { iUpcCharge = txtUrcCharge.Text.ToString(); }
            
            if (rbRMotos1.Checked) { iRMotos = 1; }
            if (rbRMotos2.Checked) { iRMotos = 2; }
            if (rbRMotos3.Checked) { iRMotos = 3; }
            if (rbRMotos4.Checked) { iRMotos = 4; }
            if (rbRMotos5.Checked) { iRMotos = 5; }
            if (rbRMotos6.Checked) { iRMotos = 6; }
            if (rbRMotos7.Checked) { iRMotos = 7; }
            if (rbRMotos8.Checked) { iRMotos = 8; }
            if (rbRMotos9.Checked) { iRMotos = 9; }
            if (rbRMotos10.Checked) { iRMotos = 10; }

            if (rbRMotos11.Checked) { iRMotos = 11; }
            if (rbRMotos12.Checked) { iRMotos = 12; }
            if (rbRMotos13.Checked) { iRMotos = 13; }
            if (rbRMotos14.Checked) { iRMotos = 14; }
            if (rbRMotos15.Checked) { iRMotos = 15; }
            if (rbRMotos16.Checked) { iRMotos = 16; }
            if (rbRMotos17.Checked) { iRMotos = 17; }
            if (rbRMotos18.Checked) { iRMotos = 18; }
            if (rbRMotos19.Checked) { iRMotos = 19; }
            if (rbRMotos20.Checked) { iRMotos = 20; }

            if (rbRMotos21.Checked) { iRMotos = 21; }
            if (rbRMotos22.Checked) { iRMotos = 22; }
            if (rbRMotos23.Checked) { iRMotos = 23; }
            if (rbRMotos24.Checked) { iRMotos = 24; }
            if (rbRMotos25.Checked) { iRMotos = 25; }
            if (rbRMotos26.Checked) { iRMotos = 26; }
            if (rbRMotos27.Checked) { iRMotos = 27; }
            if (rbRMotos28.Checked) { iRMotos = 28; }
            if (rbRMotos29.Checked) { iRMotos = 29; }
            if (rbRMotos30.Checked) { iRMotos = 30; }

            if (txtRpmPeriod.Text.Trim() != "") { iRpmPeriod = txtRpmPeriod.Text.ToString(); }
            if (ddlRpm.SelectedValue.Trim() != "") { iRpmMY = ddlRpm.SelectedValue.ToString(); }
            if (txtRpmCharge.Text.Trim() != "") { iRpmCharge = txtRpmCharge.Text.ToString(); }

            if (txtParkingOtherCharge.Text.Trim() != "") { iOtherCharge = txtParkingOtherCharge.Text.ToString(); }

            if (rbTL1.Checked) { iTL = 1; }
            if (rbTL2.Checked) { iTL = 2; }
            if (rbTL3.Checked) { iTL = 3; }
            if (rbTL4.Checked) { iTL = 4; }
            if (rbTL5.Checked) { iTL = 5; }
            if (rbTL6.Checked) { iTL = 6; }
            if (rbTL7.Checked) { iTL = 7; }
            if (rbTL8.Checked) { iTL = 8; }
            if (rbTL9.Checked) { iTL = 9; }
            if (rbTL10.Checked) { iTL = 10; }

            if (rbTL11.Checked) { iTL = 11; }
            if (rbTL12.Checked) { iTL = 12; }
            if (rbTL13.Checked) { iTL = 13; }
            if (rbTL14.Checked) { iTL = 14; }
            if (rbTL15.Checked) { iTL = 15; }
            if (rbTL16.Checked) { iTL = 16; }
            if (rbTL17.Checked) { iTL = 17; }
            if (rbTL18.Checked) { iTL = 18; }
            if (rbTL19.Checked) { iTL = 19; }
            if (rbTL20.Checked) { iTL = 20; }

            if (rbTL21.Checked) { iTL = 21; }
            if (rbTL22.Checked) { iTL = 22; }
            if (rbTL23.Checked) { iTL = 23; }
            if (rbTL24.Checked) { iTL = 24; }
            if (rbTL25.Checked) { iTL = 25; }
            if (rbTL26.Checked) { iTL = 26; }
            if (rbTL27.Checked) { iTL = 27; }
            if (rbTL28.Checked) { iTL = 28; }
            if (rbTL29.Checked) { iTL = 29; }
            if (rbTL30.Checked) { iTL = 30; }

            iTLCharge = Convert.ToInt32( txtProsTelpLineCharge.Text);

            string iSpecialConds = txtSpecialConditions.Text.Trim();

            DateTime iServiceCommDate = DateTime.ParseExact(txtServiceCommencementDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
            DateTime iRentCommDate = DateTime.ParseExact(txtRentCommencementDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
            
            try
            {
                //insert CFS
                executeAddCFS(iLoB, iLoBOther, iPropertyName, iCFSSeq, iLOOMonth, iLOOYear, iLOODate.ToString(),
                                iNPWP, iCompanyName, iAddress, iCity, iZIP, iTelp,
                                iPIC1Name, iPIC1Position, iPIC1Email, iPIC1MobilePh,
                                iPIC2Name, iPIC3Position, iPIC3Email, iPIC3MobilePh,
                                iPIC3Name, iPIC3Position, iPIC3Email, iPIC3MobilePh,
                                iNoEmployees, iRCars, iUCars, iRMotos, iTL, iTLCharge, iSpecialConds,
                                iServiceCommDate.ToString(), iRentCommDate.ToString(), iFittingOutDate.ToString(), iIsTenant);

                if (!bRes) { return; }

                //insert suite data
                string iCFSIDSuite = getCFSID(iLoB,"10" , iCFSSeq, iLOOYear, iLOOMonth);

                if (chkSuite101.Checked) { executeAddSuite(iCFSIDSuite, "1", "101", txtSuite101.Text,txtSuite101KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge, 
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge, 
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0","0","0", iOtherCharge);}
                if (chkSuite105.Checked) { executeAddSuite(iCFSIDSuite, "1", "105", txtSuite105.Text, txtSuite105KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite110.Checked) { executeAddSuite(iCFSIDSuite, "1", "110", txtSuite110.Text, txtSuite110KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite201.Checked) { executeAddSuite(iCFSIDSuite, "2", "201", txtSuite201.Text, txtSuite201KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite205.Checked) { executeAddSuite(iCFSIDSuite, "2", "205", txtSuite205.Text, txtSuite205KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite210.Checked) { executeAddSuite(iCFSIDSuite, "2", "210", txtSuite210.Text, txtSuite210KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite301.Checked) { executeAddSuite(iCFSIDSuite, "3", "301", txtSuite301.Text, txtSuite301KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite305.Checked) { executeAddSuite(iCFSIDSuite, "3", "305", txtSuite305.Text, txtSuite305KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite310.Checked) { executeAddSuite(iCFSIDSuite, "3", "310", txtSuite310.Text, txtSuite310KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite501.Checked) { executeAddSuite(iCFSIDSuite, "5", "501", txtSuite501.Text, txtSuite501KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite505.Checked) { executeAddSuite(iCFSIDSuite, "5", "505", txtSuite505.Text, txtSuite505KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite510.Checked) { executeAddSuite(iCFSIDSuite, "5", "510", txtSuite510.Text, txtSuite510KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite601.Checked) { executeAddSuite(iCFSIDSuite, "6", "601", txtSuite601.Text, txtSuite601KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite605.Checked) { executeAddSuite(iCFSIDSuite, "6", "605", txtSuite605.Text, txtSuite605KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite610.Checked) { executeAddSuite(iCFSIDSuite, "6", "610", txtSuite610.Text, txtSuite610KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite701.Checked) { executeAddSuite(iCFSIDSuite, "7", "701", txtSuite701.Text, txtSuite701KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite705.Checked) { executeAddSuite(iCFSIDSuite, "7", "705", txtSuite705.Text, txtSuite705KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite710.Checked) { executeAddSuite(iCFSIDSuite, "7", "710", txtSuite710.Text, txtSuite710KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite801.Checked) { executeAddSuite(iCFSIDSuite, "8", "801", txtSuite801.Text, txtSuite801KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite805.Checked) { executeAddSuite(iCFSIDSuite, "8", "805", txtSuite805.Text, txtSuite805KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite810.Checked) { executeAddSuite(iCFSIDSuite, "8", "810", txtSuite810.Text, txtSuite810KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite901.Checked) { executeAddSuite(iCFSIDSuite, "9", "901", txtSuite901.Text, txtSuite901KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite905.Checked) { executeAddSuite(iCFSIDSuite, "9", "905", txtSuite905.Text, txtSuite905KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite910.Checked) { executeAddSuite(iCFSIDSuite, "9", "910", txtSuite910.Text, txtSuite910KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (!bRes) {
                    executeDelete("mCFS", iCFSIDSuite,"Error at insert suite data.", HttpContext.Current.Session["userid"].ToString());
                    return;
                }

                if (txtMemorandumExpiredDate.Text.Trim() == "")
                {
                    txtMemorandumExpiredDate.Text = "01-01-1900";
                }

                DateTime iContractExpDate = DateTime.ParseExact(txtContractExpiredDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                DateTime iMemorandumExpDate = DateTime.ParseExact(txtMemorandumExpiredDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);

                                    


                //insert contract data
                executeAddContract(iCFSIDSuite, txtContractNo.Text,iContractExpDate.ToString(),
                               txtMemorandumNo.Text, iMemorandumExpDate.ToString(), txtContractNote.Text, txtContractPeriod.Text);

                if (!bRes)
                {
                    executeDelete("mCFS", iCFSIDSuite, "Error at insert suite data.", HttpContext.Current.Session["userid"].ToString());
                    return;
                }
                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeAddData", me.Message);
            }
        }

        protected void executeEditData()
        {
            string iNPWP = txtNPWP.Text.Trim();
            //DateTime iLOODate = DateTime.ParseExact(txtLOODate.Text.Trim(), "dd-MM-yyyy", CultureInfo.InvariantCulture);

            //string iY = iLOODate.Year.ToString();
            //string iLOOYear = Str.Right(iY, 2);


            //string rMon = iLOODate.Month.ToString();
            //string iMon = "";
            //if (rMon.Length == 1)
            //{
            //    iMon = "0" + rMon;
            //}
            //else { iMon = rMon; }


            //string iLOOMonth = iMon;
            //string iCFSSeq = getCFSSeqNumber(iLOOYear);
            string iIsTenant;
            if (chkIsTenant.Checked) { iIsTenant = "0"; } else { iIsTenant = "1"; }

            string iCompanyName = txtCompanyName.Text.Trim();
            string iAddress = txtAddress.Text.Trim();
            string iCity = txtCity.Text.Trim();
            string iZIP = txtZIP.Text.Trim();
            string iTelp = txtTelp.Text.Trim();

            string iPIC1Name = txtPIC1Name.Text.Trim();
            string iPIC1Position = txtPIC1Position.Text.Trim();
            string iPIC1MobilePh = txtPIC1MobilePh.Text.Trim();
            string iPIC1Email = txtPIC1Email.Text.Trim();
            string iPIC2Name = txtPIC2Name.Text.Trim();
            string iPIC2Position = txtPIC2Position.Text.Trim();
            string iPIC2MobilePh = txtPIC2MobilePh.Text.Trim();
            string iPIC2Email = txtPIC2Email.Text.Trim();
            string iPIC3Name = txtPIC3Name.Text.Trim();
            string iPIC3Position = txtPIC3Position.Text.Trim();
            string iPIC3MobilePh = txtPIC3MobilePh.Text.Trim();
            string iPIC3Email = txtPIC3Email.Text.Trim();

            //string iLoB = cmbLoB.SelectedValue.ToString();
            //string iLoBOther = txtLoB.Text.Trim();
            string iNoEmployees = cmbNoE.SelectedValue.ToString();

            int iRCars = 0;
            int iUCars = 0;
            int iRMotos = 0;
            int iTL = 0;
            int iTLCharge = 0;

            string iRpcPeriod = "0";
            string iRpcMY = "Month(s)";
            string iRpcCharge = "0";

            string iUpcPeriod = "0";
            string iUpcMY = "Month(s)";
            string iUpcCharge = "0";

            string iRpmPeriod = "0";
            string iRpmMY = "Month(s)";
            string iRpmCharge = "0";

            string iRentPeriod = "0";
            string iRentPeriodMY = "Month(s)";
            string iRentCharge = "0";
            string iServiceCharge = "0";
            string iOtherCharge = "0";
            string iDepositPeriod = "0";
            string iDepositPeriodMY = "Month(s)";
            string iDepositRentCharge = "0";
            string iDepositServiceCharge = "0";
            string iDepositOtherCharge = "0";

            if (txtRentPeriod.Text.Trim() == "") { iRentPeriod = "0"; } else { iRentPeriod = txtRentPeriod.Text.Trim(); };
            if (ddlRentPeriod.SelectedValue.ToString() == "") { iRentPeriodMY = "Month(s)"; } else { iRentPeriodMY = ddlRentPeriod.SelectedValue.ToString(); };
            if (txtRentCharge.Text.Trim() == "") { iRentCharge = "0"; } else { iRentCharge = txtRentCharge.Text.Trim(); };
            if (txtServiceCharge.Text.Trim() == "") { iServiceCharge = "0"; } else { iServiceCharge = txtServiceCharge.Text.Trim(); };
            if (txtOtherCharge.Text.Trim() == "") { iOtherCharge = "0"; } else { iOtherCharge = txtOtherCharge.Text.Trim(); };
            if (txtDepositPeriod.Text.Trim() == "") { iDepositPeriod = "0"; } else { iDepositPeriod = txtDepositPeriod.Text.Trim(); };
            if (ddlDepositPeriod.SelectedValue.ToString() == "") { iDepositPeriodMY = "0"; } else { iDepositPeriodMY = ddlDepositPeriod.SelectedValue.ToString(); };
            if (txtDepositRentCharge.Text.Trim() == "") { iDepositRentCharge = "0"; } else { iDepositRentCharge = txtDepositRentCharge.Text.Trim(); };
            if (txtDepositServiceCharge.Text.Trim() == "") { iDepositServiceCharge = "0"; } else { iDepositServiceCharge = txtDepositServiceCharge.Text.Trim(); };
            if (txtDepositOtherCharge.Text.Trim() == "") { iDepositOtherCharge = "0"; } else { iDepositOtherCharge = txtDepositOtherCharge.Text.Trim(); };
            if (rbRCars1.Checked) { iRCars = 1; }
            if (rbRCars2.Checked) { iRCars = 2; }
            if (rbRCars3.Checked) { iRCars = 3; }
            if (rbRCars4.Checked) { iRCars = 4; }
            if (rbRCars5.Checked) { iRCars = 5; }
            if (rbRCars6.Checked) { iRCars = 6; }
            if (rbRCars7.Checked) { iRCars = 7; }
            if (rbRCars8.Checked) { iRCars = 8; }
            if (rbRCars9.Checked) { iRCars = 9; }
            if (rbRCars10.Checked) { iRCars = 10; }

            if (rbRCars11.Checked) { iRCars = 11; }
            if (rbRCars12.Checked) { iRCars = 12; }
            if (rbRCars13.Checked) { iRCars = 13; }
            if (rbRCars14.Checked) { iRCars = 14; }
            if (rbRCars15.Checked) { iRCars = 15; }
            if (rbRCars16.Checked) { iRCars = 16; }
            if (rbRCars17.Checked) { iRCars = 17; }
            if (rbRCars18.Checked) { iRCars = 18; }
            if (rbRCars19.Checked) { iRCars = 19; }
            if (rbRCars20.Checked) { iRCars = 20; }

            if (rbRCars21.Checked) { iRCars = 21; }
            if (rbRCars22.Checked) { iRCars = 22; }
            if (rbRCars23.Checked) { iRCars = 23; }
            if (rbRCars24.Checked) { iRCars = 24; }
            if (rbRCars25.Checked) { iRCars = 25; }
            if (rbRCars26.Checked) { iRCars = 26; }
            if (rbRCars27.Checked) { iRCars = 27; }
            if (rbRCars28.Checked) { iRCars = 28; }
            if (rbRCars29.Checked) { iRCars = 29; }
            if (rbRCars30.Checked) { iRCars = 30; }

            if (txtRpcPeriod.Text.Trim() != "") { iRpcPeriod = txtRpcPeriod.Text.ToString(); }
            if (ddlRpc.SelectedValue.Trim() != "") { iRpcMY = ddlRpc.SelectedValue.ToString(); }
            if (txtRpcCharge.Text.Trim() != "") { iRpcCharge = txtRpcCharge.Text.ToString(); }

            if (rbUCars1.Checked) { iUCars = 1; }
            if (rbUCars2.Checked) { iUCars = 2; }
            if (rbUCars3.Checked) { iUCars = 3; }
            if (rbUCars4.Checked) { iUCars = 4; }
            if (rbUCars5.Checked) { iUCars = 5; }
            if (rbUCars6.Checked) { iUCars = 6; }
            if (rbUCars7.Checked) { iUCars = 7; }
            if (rbUCars8.Checked) { iUCars = 8; }
            if (rbUCars9.Checked) { iUCars = 9; }
            if (rbUCars10.Checked) { iUCars = 10; }

            if (rbUCars11.Checked) { iUCars = 11; }
            if (rbUCars12.Checked) { iUCars = 12; }
            if (rbUCars13.Checked) { iUCars = 13; }
            if (rbUCars14.Checked) { iUCars = 14; }
            if (rbUCars15.Checked) { iUCars = 15; }
            if (rbUCars16.Checked) { iUCars = 16; }
            if (rbUCars17.Checked) { iUCars = 17; }
            if (rbUCars18.Checked) { iUCars = 18; }
            if (rbUCars19.Checked) { iUCars = 19; }
            if (rbUCars20.Checked) { iUCars = 20; }

            if (rbUCars21.Checked) { iUCars = 21; }
            if (rbUCars22.Checked) { iUCars = 22; }
            if (rbUCars23.Checked) { iUCars = 23; }
            if (rbUCars24.Checked) { iUCars = 24; }
            if (rbUCars25.Checked) { iUCars = 25; }
            if (rbUCars26.Checked) { iUCars = 26; }
            if (rbUCars27.Checked) { iUCars = 27; }
            if (rbUCars28.Checked) { iUCars = 28; }
            if (rbUCars29.Checked) { iUCars = 29; }
            if (rbUCars30.Checked) { iUCars = 30; }

            if (txtUrcPeriod.Text.Trim() != "") { iUpcPeriod = txtUrcPeriod.Text.ToString(); }
            if (ddlUrc.SelectedValue.Trim() != "") { iUpcMY = ddlUrc.SelectedValue.ToString(); }
            if (txtUrcCharge.Text.Trim() != "") { iUpcCharge = txtUrcCharge.Text.ToString(); }

            if (rbRMotos1.Checked) { iRMotos = 1; }
            if (rbRMotos2.Checked) { iRMotos = 2; }
            if (rbRMotos3.Checked) { iRMotos = 3; }
            if (rbRMotos4.Checked) { iRMotos = 4; }
            if (rbRMotos5.Checked) { iRMotos = 5; }
            if (rbRMotos6.Checked) { iRMotos = 6; }
            if (rbRMotos7.Checked) { iRMotos = 7; }
            if (rbRMotos8.Checked) { iRMotos = 8; }
            if (rbRMotos9.Checked) { iRMotos = 9; }
            if (rbRMotos10.Checked) { iRMotos = 10; }

            if (rbRMotos11.Checked) { iRMotos = 11; }
            if (rbRMotos12.Checked) { iRMotos = 12; }
            if (rbRMotos13.Checked) { iRMotos = 13; }
            if (rbRMotos14.Checked) { iRMotos = 14; }
            if (rbRMotos15.Checked) { iRMotos = 15; }
            if (rbRMotos16.Checked) { iRMotos = 16; }
            if (rbRMotos17.Checked) { iRMotos = 17; }
            if (rbRMotos18.Checked) { iRMotos = 18; }
            if (rbRMotos19.Checked) { iRMotos = 19; }
            if (rbRMotos20.Checked) { iRMotos = 20; }

            if (rbRMotos21.Checked) { iRMotos = 21; }
            if (rbRMotos22.Checked) { iRMotos = 22; }
            if (rbRMotos23.Checked) { iRMotos = 23; }
            if (rbRMotos24.Checked) { iRMotos = 24; }
            if (rbRMotos25.Checked) { iRMotos = 25; }
            if (rbRMotos26.Checked) { iRMotos = 26; }
            if (rbRMotos27.Checked) { iRMotos = 27; }
            if (rbRMotos28.Checked) { iRMotos = 28; }
            if (rbRMotos29.Checked) { iRMotos = 29; }
            if (rbRMotos30.Checked) { iRMotos = 30; }

            if (txtRpmPeriod.Text.Trim() != "") { iRpmPeriod = txtRpmPeriod.Text.ToString(); }
            if (ddlRpm.SelectedValue.Trim() != "") { iRpmMY = ddlRpm.SelectedValue.ToString(); }
            if (txtRpmCharge.Text.Trim() != "") { iRpmCharge = txtRpmCharge.Text.ToString(); }

            if (txtParkingOtherCharge.Text.Trim() != "") { iOtherCharge = txtParkingOtherCharge.Text.ToString(); }

            if (rbTL1.Checked) { iTL = 1; }
            if (rbTL2.Checked) { iTL = 2; }
            if (rbTL3.Checked) { iTL = 3; }
            if (rbTL4.Checked) { iTL = 4; }
            if (rbTL5.Checked) { iTL = 5; }
            if (rbTL6.Checked) { iTL = 6; }
            if (rbTL7.Checked) { iTL = 7; }
            if (rbTL8.Checked) { iTL = 8; }
            if (rbTL9.Checked) { iTL = 9; }
            if (rbTL10.Checked) { iTL = 10; }

            if (rbTL11.Checked) { iTL = 11; }
            if (rbTL12.Checked) { iTL = 12; }
            if (rbTL13.Checked) { iTL = 13; }
            if (rbTL14.Checked) { iTL = 14; }
            if (rbTL15.Checked) { iTL = 15; }
            if (rbTL16.Checked) { iTL = 16; }
            if (rbTL17.Checked) { iTL = 17; }
            if (rbTL18.Checked) { iTL = 18; }
            if (rbTL19.Checked) { iTL = 19; }
            if (rbTL20.Checked) { iTL = 20; }

            if (rbTL21.Checked) { iTL = 21; }
            if (rbTL22.Checked) { iTL = 22; }
            if (rbTL23.Checked) { iTL = 23; }
            if (rbTL24.Checked) { iTL = 24; }
            if (rbTL25.Checked) { iTL = 25; }
            if (rbTL26.Checked) { iTL = 26; }
            if (rbTL27.Checked) { iTL = 27; }
            if (rbTL28.Checked) { iTL = 28; }
            if (rbTL29.Checked) { iTL = 29; }
            if (rbTL30.Checked) { iTL = 30; }
            iTLCharge = Convert.ToInt32(txtProsTelpLineCharge.Text);

            string iSpecialConds = txtSpecialConditions.Text.Trim();
            DateTime iServiceCommDate = DateTime.ParseExact(txtServiceCommencementDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
            DateTime iRentCommDate = DateTime.ParseExact(txtRentCommencementDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
            DateTime iFittingOutDate = DateTime.ParseExact(txtFittingOutDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);

            try
            {

                //edit CFS data
                executeEditCFS(Session["EditIDCFS"].ToString(), iNPWP, iCompanyName, iAddress, iCity, iZIP, iTelp,
                                iPIC1Name, iPIC1Position, iPIC1Email, iPIC1MobilePh,
                                iPIC2Name, iPIC3Position, iPIC3Email, iPIC3MobilePh,
                                iPIC3Name, iPIC3Position, iPIC3Email, iPIC3MobilePh,
                                iNoEmployees, iRCars, iUCars, iRMotos, iTL, iTLCharge, iSpecialConds,
                                iServiceCommDate.ToString(),iRentCommDate.ToString(), iFittingOutDate.ToString(), iIsTenant);

                //insert suite data
                string iCFSIDSuite = Session["EditIDCFS"].ToString();

                executeRemoveSuite(Session["SuiteNo"].ToString());

                if (chkSuite101.Checked) { executeEditSuite( iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "1", "101", txtSuite101.Text, txtSuite101KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite105.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "1", "105", txtSuite105.Text, txtSuite105KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite110.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "1", "110", txtSuite110.Text, txtSuite110KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite201.Checked) { executeEditSuite(iCFSIDSuite,Session["EditIDCFSSuite"].ToString(), "2", "201", txtSuite201.Text, txtSuite201KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                
                if (chkSuite205.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "2", "205", txtSuite205.Text, txtSuite205KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite210.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "2", "210", txtSuite210.Text, txtSuite210KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite301.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "3", "301", txtSuite301.Text, txtSuite301KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite305.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "3", "305", txtSuite305.Text, txtSuite305KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite310.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "3", "310", txtSuite310.Text, txtSuite310KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite501.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "5", "501", txtSuite501.Text, txtSuite501KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite505.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "5", "505", txtSuite505.Text, txtSuite505KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite510.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "5", "510", txtSuite510.Text, txtSuite510KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite601.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "6", "601", txtSuite601.Text, txtSuite601KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite605.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "6", "605", txtSuite605.Text, txtSuite605KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite610.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "6", "610", txtSuite610.Text, txtSuite610KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite701.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "7", "701", txtSuite701.Text, txtSuite701KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite705.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "7", "705", txtSuite705.Text, txtSuite705KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite710.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "7", "710", txtSuite710.Text, txtSuite710KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite801.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "8", "801", txtSuite801.Text, txtSuite801KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite805.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "8", "805", txtSuite805.Text, txtSuite805KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite810.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "8", "810", txtSuite810.Text, txtSuite810KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                if (chkSuite901.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "9", "901", txtSuite901.Text, txtSuite901KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite905.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "9", "905", txtSuite905.Text, txtSuite905KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }
                if (chkSuite910.Checked) { executeEditSuite(iCFSIDSuite, Session["EditIDCFSSuite"].ToString(), "9", "910", txtSuite910.Text, txtSuite910KVA.Text,
                    iRentPeriod, iRentPeriodMY, iRentCharge, iServiceCharge, iOtherCharge,
                    iDepositPeriod, iDepositPeriodMY, iDepositRentCharge, iDepositServiceCharge, iDepositOtherCharge, 
                    iRCars.ToString(), iRpcPeriod, iRpcMY, iRpcCharge,
                    iUCars.ToString(), iUpcPeriod, iUpcMY, iUpcCharge,
                    iRMotos.ToString(), iRpmPeriod, iRpmMY, iRpmCharge,
                    "0", "0", "0", iOtherCharge);
                }

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeEditData", me.Message);
            }

        }

        private void executeDelete(string iTableName, string id, string iReason, string userID)
        {
            try
            {
                SqlConnection conn = new SqlConnection(Db.GetConnectionString());
                conn.Open();
                SqlCommand deleteCmd = new SqlCommand("spDeleteTable", conn);
                deleteCmd.CommandType = CommandType.StoredProcedure;

                deleteCmd.Parameters.AddWithValue("@TableName", iTableName);
                deleteCmd.Parameters.AddWithValue("@ID", id);
                deleteCmd.Parameters.AddWithValue("@Reason", iReason);
                deleteCmd.Parameters.AddWithValue("@UserID", userID);

                deleteCmd.ExecuteNonQuery();
                conn.Close();

                bRes = true;
            }
            catch (Exception me)
            {
                bRes = false;
                showMessage(eMessage.eError, "executeDelete", me.Message);
            }

        }

        private void BindGridContract()
        {
            string iSql = "execute spGetCFSContract_Query " + lblID.Text + " ";
            try
            {
                GridView1.DataSource = Db.get_list(iSql);
                GridView1.DataBind();
            }
            catch (SqlException ex)
            {
                showMessage(eMessage.eError, "BindGridContract", ex.Message);
            }
            catch (Exception ex)
            {
                showMessage(eMessage.eError, "BindGridContract", ex.Message);
            }
        }

        private void BindGridParking()
        {
            string iSql = "execute spGetCFSParking_Query " + lblID.Text + " ";
            try
            {
                GridView2.DataSource = Db.get_list(iSql);
                GridView2.DataBind();
            }
            catch (SqlException ex)
            {
                showMessage(eMessage.eError, "BindGridParking", ex.Message);
            }
            catch (Exception ex)
            {
                showMessage(eMessage.eError, "BindGridParking", ex.Message);
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            
            Vd.isValidLogin();
            
            txtLOODate.Enabled = true;
            btnSave.Enabled = true;
            btnCancel.Enabled = true;

            btnAddContract.Enabled = false;
            txtMemorandumNo.Enabled = false;
            txtMemorandumExpiredDate.Enabled = false;

            divParking.Visible = true;
            divParking2.Visible = false;

            if (!Page.IsPostBack)
            {
                TabName.Value = Request.Form[TabName.UniqueID];

                hideMessageBox();
                getSuite();

                if (Session["EditCFS"] != null)
                {
                    divParking.Visible = false;
                    divParking2.Visible = true;

                    bEdit = true;
                    getData();
                    getContractID(lblID.Text);
                    BindGridContract();
                    BindGridParking();

                    btnAddContract.Enabled = true;
                    txtMemorandumNo.Enabled = true;
                    txtMemorandumExpiredDate.Enabled = true;
                }

                if (Session["DetailCFS"] != null)
                {
                    btnSave.Enabled = false;
                    btnCancel.Enabled = false;
                }
            }else
            {
                if (Session["EditCFS"] != null)
                {
                    divParking.Visible = false;
                    divParking2.Visible = true;
                    
                    btnAddContract.Enabled = true;
                    txtMemorandumNo.Enabled = true;
                    txtMemorandumExpiredDate.Enabled = true;
                    txtLOODate.Enabled = false;
                }
            }

            if (Session["EditCFS"] != null) { bEdit = true; }           
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            if (checkData())
            {
                if (bEdit)
                {
                    executeEditData();
                    bEdit = false;
                    if (bRes) { HttpContext.Current.Response.Redirect("./SumCFS.aspx"); }
                }
                else
                {
                    executeAddData();
                    //executeDelete("mCFS", Session["EditIDCFS"].ToString(), "Manual edit", Session["userid"].ToString());

                    if (bRes)
                    {
                        clearText();
                        hideMessageBox();
                        getSuite();
                    }
                }
            }
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            clearText();
            hideMessageBox();
            if (Session["EditCFS"] != null)
            {
                HttpContext.Current.Response.Redirect("./SumCFS.aspx");
            }

            Session["EditCFS"] = null;
        }

        protected void btnDelete_Click(object sender, EventArgs e)
        {
            if (txtReasonToDelete.Text.Trim() == "")
            {
                showMessage(eMessage.eWarning, "Reason is empty.", "Please add your reason to delete data.");
                txtReasonToDelete.Focus();
            }
            else
            {
                executeDelete("mCFSContract", HttpContext.Current.Session["iIDData"].ToString(), 
                    txtReasonToDelete.Text.Trim(), HttpContext.Current.Session["userid"].ToString());
                Session["iIDData"] = "";
                BindGridContract();
            }
        }

        protected void btnDeleteParking_Click(object sender, EventArgs e)
        {
            if (txtReasonToDeleteParking.Text.Trim() == "")
            {
                showMessage(eMessage.eWarning, "Reason is empty.", "Please add your reason to delete data.");
                txtReasonToDeleteParking.Focus();
            }
            else
            {
                executeDelete("mCFSParking", HttpContext.Current.Session["iIDDataParking"].ToString(),
                    txtReasonToDelete.Text.Trim(), HttpContext.Current.Session["userid"].ToString());
                Session["iIDDataParking"] = "";
                BindGridParking();
                clearText();
            }
        }

        protected void btnAddContract_Click(object sender, EventArgs e)
        {
            if (txtMemorandumExpiredDate.Text.Trim() == "")
            {
                txtMemorandumExpiredDate.Text = "01-01-1900";
            }

            try
            {
                DateTime iContractExpDate = DateTime.ParseExact(txtContractExpiredDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                DateTime iMemorandumExpDate = DateTime.ParseExact(txtMemorandumExpiredDate.Text, "dd-MM-yyyy", CultureInfo.InvariantCulture);

                executeAddContract(Session["EditIDCFS"].ToString(), txtContractNo.Text, iContractExpDate.ToString(),
                                txtMemorandumNo.Text, iMemorandumExpDate.ToString(), txtContractNote.Text, txtContractPeriod.Text);
            }
                    catch (Exception me)
            {
                showMessage(eMessage.eWarning, "Format date", "Please input your contract/memorandum format date to dd-MM-yyyy.");
                return;
            }            
            
            if (bRes)
            {
                //txtContractNo.Text = "";
                //txtContractExpiredDate.Text = "";
                //txtContractPeriod.Text = "";
                txtMemorandumNo.Text = "";
                txtMemorandumExpiredDate.Text = "";
                txtContractNote.Text = "";

                btnAddContract.Enabled = true;
                txtMemorandumNo.Enabled = true;
                txtMemorandumExpiredDate.Enabled = true;

                if (Session["EditCFS"] != null) { txtLOODate.Enabled = false; }
                BindGridContract();
            }
        }

        protected void btnAddParking_Click(object sender, EventArgs e)
        {
            DateTime iStartDate = DateTime.ParseExact(txtParkingStartPeriod.Text.Trim(), "dd-MM-yyyy", CultureInfo.InvariantCulture);

            executeAddParking(Session["EditIDCFS"].ToString(), ddlParkingType.SelectedValue.ToString(),
                    txtParkingLot.Text, txtParkingPeriod.Text, ddlParkingPeriod.SelectedValue.ToString(), txtParkingPrice.Text,
                    txtParkingLicenseNo.Text, iStartDate.ToString());

            //if (bEdit)
            //{
            //    executeEditParking(iIDCFSContractEdit, Session["EditIDCFS"].ToString(),ddlParkingType.SelectedValue.ToString(),
            //        txtParkingLot.Text,txtParkingPeriod.Text, ddlParkingPeriod.SelectedValue.ToString(),txtParkingPrice.Text,
            //        txtParkingLicenseNo.Text);
            //}
            //else
            //{
                
            //}
            if (bRes)
            {
                ddlParkingType.Text = "";
                txtParkingLot.Text = "";
                txtParkingPeriod.Text = "";
                ddlParkingPeriod.Text = "";
                txtParkingPrice.Text = "";
                txtParkingLicenseNo.Text = "";

                BindGridParking();
            }
        }

        protected void GridView1_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            GridView1.PageIndex = e.NewPageIndex;
            BindGridContract();
        }

        protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            //if (Session["DetailCFS"] != null) { showMessage(eMessage.eWarning, "Cannot Edit Data", "You cannot edit this data in detailed mode."); return; }

            int index = 0;
            double num;
            string myString = e.CommandArgument.ToString();
            bool isNumber = double.TryParse(myString, out num);

            if (isNumber)
            {
                index = Convert.ToInt32(e.CommandArgument);
            }

            if (e.CommandName.Equals("editRecord"))
            {
                GridViewRow gvrow = GridView1.Rows[index];
                string kode = GridView1.DataKeys[index].Value.ToString();

                iIDCFSContractEdit = kode;
                getContractID(kode);                                
            }
            else if (e.CommandName.Equals("deleteRecord"))
            {
                string kode = GridView1.DataKeys[index].Value.ToString();

                hfCode.Value = kode;
                GridViewRow gvrow = GridView1.Rows[index];

                Session["iIDData"] = kode;

                txtReasonToDelete.Text = "";

                executeDelete("mCFSContract", kode,
                    "Delete at editting contract data.", HttpContext.Current.Session["userid"].ToString());
                if (bRes)
                {
                    Session["iIDData"] = "";
                    BindGridContract();
                }                

                //System.Text.StringBuilder sb = new System.Text.StringBuilder();
                //sb.Append(@"<script type='text/javascript'>");
                //sb.Append("$('#deleteModal').modal('show');");
                //sb.Append(@"</script>");
                //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "DeleteModalScript", sb.ToString(), false);
            }
        }

        protected void GridView2_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            GridView2.PageIndex = e.NewPageIndex;
            BindGridParking();
        }

        protected void GridView2_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            //if (Session["DetailCFS"] != null) { showMessage(eMessage.eWarning, "Cannot Edit Data", "You cannot edit this data in detailed mode."); return; }

            int index = 0;
            double num;
            string myString = e.CommandArgument.ToString();
            bool isNumber = double.TryParse(myString, out num);

            if (isNumber)
            {
                index = Convert.ToInt32(e.CommandArgument);
            }

            if (e.CommandName.Equals("editRecord"))
            {
                GridViewRow gvrow = GridView2.Rows[index];
                string kode = GridView2.DataKeys[index].Value.ToString();

                ////getEdit(kode);
                iIDCFSContractEdit = kode;
                ddlParkingType.Text= HttpUtility.HtmlDecode(gvrow.Cells[3].Text);
                txtParkingLot.Text= HttpUtility.HtmlDecode(gvrow.Cells[4].Text);
                txtParkingPeriod.Text= HttpUtility.HtmlDecode(gvrow.Cells[5].Text);
                ddlParkingPeriod.Text= HttpUtility.HtmlDecode(gvrow.Cells[6].Text);
                txtParkingLicenseNo.Text= HttpUtility.HtmlDecode(gvrow.Cells[7].Text);                
            }
            else if (e.CommandName.Equals("deleteRecord"))
            {
                string kode = GridView2.DataKeys[index].Value.ToString();

                hfCode.Value = kode;
                GridViewRow gvrow = GridView2.Rows[index];

                Session["iIDDataParking"] = kode;

                txtReasonToDelete.Text = "";

                executeDelete("mCFSParking", kode,
                    "Delete at editting parking data.", HttpContext.Current.Session["userid"].ToString());
                if (bRes)
                {
                    Session["iIDDataParking"] = "";
                    BindGridParking();
                }
            }
        }
    }
}

